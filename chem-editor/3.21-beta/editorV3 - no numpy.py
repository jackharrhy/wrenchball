import tkinter as tk
from tkinter import ttk
from random import random,randint,binomialvariate
from functools import partial
import re

#Big Lists

charList = ["Mario", "Luigi", "Donkey Kong", "Diddy Kong", "Peach", "Daisy", 
            "Green Yoshi", "Baby Mario", "Baby Luigi", "Bowser", "Wario",
            "Waluigi", "Green Koopa Troopa", "Red Toad", "Boo", "Toadette",
            "Red Shy Guy", "Birdo", "Monty Mole", "Bowser Jr.",
            "Red Koopa Paratroopa", "Blue Pianta", "Red Pianta",
            "Yellow Pianta", "Blue Noki", "Red Noki", "Green Noki",
            "Hammer Bro", "Toadsworth", "Blue Toad", "Yellow Toad",
            "Green Toad", "Purple Toad", "Blue Magikoopa", "Red Magikoopa",
            "Green Magikoopa", "Yellow Magikoopa", "King Boo", "Petey Piranha",
            "Dixie Kong", "Goomba", "Paragoomba", "Red Koopa Troopa",
            "Green Koopa Paratroopa", "Blue Shy Guy", "Yellow Shy Guy",
            "Green Shy Guy", "Gray Shy Guy", "Gray Dry Bones", 
            "Green Dry Bones", "Dark Bones", "Blue Dry Bones", "Fire Bro", 
            "Boomerang Bro", "Wiggler", "Blooper", "Funky Kong", "Tiny Kong",
            "Green Kritter", "Blue Kritter", "Red Kritter", "Brown Kritter",
            "King K. Rool", "Baby Peach", "Baby Daisy", "Baby DK", "Red Yoshi",
            "Blue Yoshi", "Yellow Yoshi", "Light Blue Yoshi", "Pink Yoshi",
            "Unused Yoshi 2", "Unused Yoshi", "Unused Toad", "Unused Pianta",
            "Unused Kritter", "Unused Koopa", "Red Mii (M)", "Orange Mii (M)",
            "Yellow Mii (M)", "Light Green Mii (M)", "Green Mii (M)",
            "Blue Mii (M)", "Light Blue Mii (M)", "Pink Mii (M)",
            "Purple Mii (M)", "Brown Mii (M)", "White Mii (M)", "Black Mii (M)",
            "Red Mii (F)", "Orange Mii (F)", "Yellow Mii (F)",
            "Light Green Mii (F)", "Green Mii (F)", "Blue Mii (F)",
            "Light Blue Mii (F)", "Pink Mii (F)", "Purple Mii (F)", 
            "Brown Mii (F)", "White Mii (F)", "Black Mii (F)"]
comboList = ["Baby DK", "Baby Daisy", "Baby Luigi", "Baby Mario", "Baby Peach",
             "Birdo", "Blooper", "Boo", "Bowser", "Bowser Jr.", "Bros",
             "  Boomerang Bro", "  Fire Bro", "  Hammer Bro", "Daisy",
             "Diddy Kong", "Dixie Kong", "Donkey Kong", "Dry Bones",
             "  Dark Bones", "  Blue Dry Bones", "  Gray Dry Bones",
             "  Green Dry Bones", "Funky Kong", "Goomba", "King Boo",
             "King K. Rool", "Koopa Paratroopas","  Green Koopa Paratroopa",
             "  Red Koopa Paratroopa", "Koopa Troopas", "  Green Koopa Troopa",
             "  Red Koopa Troopa", "Kritters", "  Green Kritter",
             "  Blue Kritter", "  Red Kritter", "  Brown Kritter", "Luigi",
             "Magikoopas", "  Blue Magikoopa", "  Green Magikoopa",
             "  Red Magikoopa", "  Yellow Magikoopa", "Mario", "Monty Mole",
             "Nokis", "  Blue Noki", "  Red Noki", "  Green Noki", "Paragoomba",
             "Peach", "Petey Piranha", "Piantas", "  Blue Pianta",
             "  Red Pianta", "  Yellow Pianta", "Shy Guys", "  Blue Shy Guy",
             "  Gray Shy Guy", "  Green Shy Guy", "  Red Shy Guy",
             "  Yellow Shy Guy", "Tiny Kong", "Toads", "  Blue Toad",
             "  Green Toad", "  Purple Toad", "  Red Toad", "  Yellow Toad",
             "Toadette","Toadsworth", "Wario", "Waluigi", "Wiggler", "Yoshis",
             "  Blue Yoshi", "  Light Blue Yoshi", "  Green Yoshi", 
             "  Pink Yoshi", "  Red Yoshi", "  Yellow Yoshi", "Black Miis",
             "  Black Mii (M)", "  Black Mii (F)","Blue Miis", "  Blue Mii (M)",
             "  Blue Mii (F)", "Brown Miis", "  Brown Mii (M)",
             "  Brown Mii (F)", "Green Miis", "  Green Mii (M)",
             "  Green Mii (F)", "Light Blue Miis", "  Light Blue Mii (M)",
             "  Light Blue Mii (F)","Light Green Miis", "  Light Green Mii (M)",
             "  Light Green Mii (F)","Orange Miis", "  Orange Mii (M)",
             "  Orange Mii (F)", "Pink Miis","  Pink Mii (M)","  Pink Mii (F)",
             "Purple Miis", "  Purple Mii (M)", "  Purple Mii (F)", "Red Miis",
             "  Red Mii (M)", "  Red Mii (F)", "White Miis", "  White Mii (M)",
             "  White Mii (F)", "Yellow Miis", "  Yellow Mii (M)",
             "  Yellow Mii (F)", "Unused Yoshi 2", "Unused Yoshi",
             "Unused Toad", "Unused Pianta", "Unused Kritter", "Unused Koopa"]
statsList = ["pitching arm","batting arm","character class","???","weight",
             "captain","star pitch","star swing","fielding ability",
             "baserunning ability","slap size","charge size","slap power",
             "charge power","bunting","speed","outfield throwing","fielding",
             "displayed pitching","displayed batting","displayed fielding",
             "dis speed","curveball speed","charge pitch speed","curve",
             "NOT stamina","traj","hit curve","stamina","star pitch type"]
trajAllList = ["Medium","High","Low","Group 3","Group 4","Group 5"]
trajUsed = [1,1,1,0,0,0]
trajList = ["Medium","High","Low"]

fieldingAbilitiesList = ["None","Super Dive","Super Jump","Tongue Catch","Suction Catch",
                         "Magical Catch","Piranha Catch","Hammer Throw","Keeper Catch",
                         "Clamber","Ball Dash","Laser Beam","Quick Throw"]
baserunningAbilitiesList = ["None","Scatter Dive","Ink Dive","Angry Attack",
                            "Teleport","Spin Attack","Burrow","Enlarge"]
classList=["Balanced","Power","Speed","Technique"]
starPitchList = ["Standard","Fireball","Tornado Ball","Barrel Ball","Banana Ball",
                 "Heart Ball","Flower Ball","Phony Ball","Liar Ball",
                 "Rainbow Ball","Suction Ball", "Killer Ball","Graffiti Ball"]
starSwingList = ["Standard","Fire Swing","Tornado Swing","Barrel Swing","Banana Swing",
                 "Heart Swing","Flower Swing","Phony Swing","Liar Swing",
                 "Egg Swing","Cannon Swing","Breath Swing","Graffiti Swing"]
starPitchTypeList = ["None","Breaking Ball","Fastball","Change-Up"]
defaultChem = [[1,2,1,1,2,1,2,1,1,0,0,1,1,1,1,1,1,1,1,0,1,2,2,2,2,2,2,1,1,1,1,
                1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,2,2,2,2,2,2,2,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,
                1,1,1,1,1,1,1,1],
               [2,1,1,1,1,2,1,1,1,0,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,
                2,1,1,1,1,1,1,1],
               [1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,0,0,0,0,
                0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,
                1,1,1,1,1,2,1,1],
               [1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,0,0,0,0,
                0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1],
               [2,1,1,1,1,2,1,1,1,0,1,1,1,2,1,2,1,0,1,1,1,1,1,1,1,1,1,1,2,2,2,
                2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,
                1,1,1,2,1,1,1,1],
               [1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,0,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,
                1,1,1,1,1,1,1,1],
               [2,1,1,1,1,1,1,2,2,1,1,1,1,1,0,1,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,
                1,1,1,1,1,1,1,1],
               [1,1,1,1,1,1,2,1,2,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,2,2,2,2,2,2,2,2,2,2,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,
                1,1,1,1,1,1,1,1],
               [1,1,1,1,1,1,2,2,1,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,
                2,1,1,1,1,1,1,1],
               [0,0,1,1,0,1,1,0,0,1,1,1,2,0,1,0,1,1,1,2,2,1,1,1,1,1,1,2,0,0,0,
                0,0,2,2,2,2,1,1,1,1,1,2,2,1,1,1,1,2,2,2,2,2,2,1,1,1,1,1,1,1,1,
                0,0,0,0,1,1,1,1,1,1,1,0,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,
                1,1,1,1,1,1,1,2],
               [0,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,
                1,1,1,1,1,1,1,1],
               [1,0,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,
                1,1,1,1,2,1,1,1],
               [1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,
                2,1,1,1,1,1,1,1],
               [1,1,1,1,2,1,1,1,1,0,1,1,1,1,1,2,1,1,1,1,1,2,2,2,1,1,1,1,2,1,1,
                1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,
                1,1,1,1,1,1,1,1],
               [1,0,1,1,1,1,0,0,0,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,2,2,2,2,2,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,2,1,1,1,1,1,1,
                1,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,
                1,1,1,1,1,1,2,1],
               [1,1,1,1,2,1,1,1,1,0,1,1,1,2,1,1,1,2,1,1,1,1,1,1,2,2,2,1,2,2,2,
                2,2,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,
                1,1,1,2,1,1,1,1],
               [1,1,1,1,1,1,0,0,0,1,1,1,1,1,2,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,0,1,0,0,0,0,0,0,0,0,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,
                1,1,1,1,1,1,1,1],
               [1,1,1,1,0,2,2,1,1,1,0,0,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,2,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,0,1,0,1,1,1,1,
                1,1,1,1,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,
                1,1,1,2,1,1,1,1],
               [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,2,2,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,
                1,1,1,1,1,2,1,1],
               [0,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,0,0,0,0,0,0,2,1,1,1,
                1,1,2,2,2,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,0,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,
                1,1,1,1,1,1,1,2],
               [1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,
                1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,
                1,1,1,1,1,1,1,1],
               [2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,0,1,1,1,1,2,2,2,1,2,2,2,
                2,2,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,
                1,2,1,1,1,1,1,1],
               [2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,0,1,1,1,1,2,2,2,1,2,2,2,
                2,2,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,
                1,1,1,1,1,1,1,1],
               [2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,0,1,1,1,1,2,2,2,1,2,2,2,
                2,2,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,
                1,1,1,1,1,1,1,1],
               [2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,0,1,2,2,2,1,1,1,0,1,1,1,
                1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,
                1,2,1,1,1,1,1,1],
               [2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,0,1,2,2,2,1,1,1,0,1,1,1,
                1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,
                1,1,1,1,1,1,1,1],
               [2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,0,1,2,2,2,1,1,1,0,1,1,1,
                1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,
                2,1,1,1,1,1,1,1],
               [1,1,1,1,1,0,1,1,1,2,1,1,1,1,1,1,1,1,1,2,1,1,1,1,0,0,0,1,1,1,1,
                1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,
                2,1,1,1,1,1,1,1],
               [1,1,1,1,2,1,1,1,1,0,1,1,1,2,1,2,1,1,1,1,0,2,2,2,1,1,1,1,1,2,2,
                2,2,1,1,1,1,1,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,2,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,
                1,1,1,1,1,2,1,1],
               [1,1,1,1,2,1,1,1,1,0,1,1,1,1,1,2,1,1,1,1,1,2,2,2,1,1,1,1,2,1,1,
                1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,
                1,2,1,1,1,1,1,1],
               [1,1,1,1,2,1,1,1,1,0,1,1,1,1,1,2,1,1,1,1,1,2,2,2,1,1,1,1,2,1,1,
                1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,
                1,1,1,1,1,1,1,1],
               [1,1,1,1,2,1,1,1,1,0,1,1,1,1,1,2,1,1,1,1,1,2,2,2,1,1,1,1,2,1,1,
                1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,
                2,1,1,1,1,1,1,1],
               [1,1,1,1,2,1,1,1,1,0,1,1,1,1,1,2,1,1,1,1,1,2,2,2,1,1,1,1,2,1,1,
                1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,
                1,1,1,1,2,1,1,1],
               [1,1,1,1,1,1,0,0,0,2,1,1,1,1,2,1,1,1,1,2,1,1,1,1,1,1,1,2,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,
                1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,
                1,2,1,1,1,1,1,1],
               [1,1,1,1,1,1,0,0,0,2,1,1,1,1,2,1,1,1,1,2,1,1,1,1,1,1,1,2,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,
                1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,
                1,1,1,1,1,1,1,1],
               [1,1,1,1,1,1,0,0,0,2,1,1,1,1,2,1,1,1,1,2,1,1,1,1,1,1,1,2,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,
                1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,
                2,1,1,1,1,1,1,1],
               [1,1,1,1,1,1,0,0,0,2,1,1,1,1,2,1,1,1,1,2,1,1,1,1,1,1,1,2,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,
                1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,
                1,1,1,1,1,1,1,1],
               [0,0,1,1,1,1,0,0,0,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,
                2,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,
                1,1,1,1,1,1,2,1],
               [1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,2,1,1,1,0,0,0,0,0,0,1,1,1,1,
                1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,
                1,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,
                1,1,1,1,1,1,1,1],
               [1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,2,2,0,0,0,0,
                0,1,1,2,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,
                1,1,1,2,1,1,1,1],
               [1,1,1,1,1,1,1,1,1,1,1,1,2,0,1,0,1,1,2,1,1,0,0,0,1,1,1,1,0,0,0,
                0,0,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,0,0,1,2,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,
                1,1,1,1,1,2,1,1],
               [1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,2,1,2,1,1,1,1,1,1,1,0,0,0,
                0,0,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,
                1,1,1,1,1,2,1,1],
               [1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,
                1,1,1,1,1,1,1,1],
               [1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,
                1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,
                2,1,1,1,1,1,1,1],
               [1,1,1,1,1,1,0,0,0,1,1,1,1,1,2,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,
                1,2,1,1,1,1,1,1],
               [1,1,1,1,1,1,0,0,0,1,1,1,1,1,2,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,
                1,1,1,1,1,1,1,1],
               [1,1,1,1,1,1,0,0,0,1,1,1,1,1,2,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,
                2,1,1,1,1,1,1,1],
               [1,1,1,1,1,1,0,0,0,1,1,1,1,1,2,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,
                1,1,1,1,1,1,1,2],
               [1,0,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,0,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,0,0,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,
                1,1,1,1,1,1,2,1],
               [1,0,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,0,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,0,0,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,
                2,1,1,1,1,1,1,1],
               [1,0,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,0,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,0,0,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,
                1,1,1,1,1,1,1,1],
               [1,0,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,0,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,0,0,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,
                1,2,1,1,1,1,1,1],
               [1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,2,1,1,1,1,0,0,0,1,1,1,1,
                1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,
                1,1,1,1,1,1,1,1],
               [1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,2,1,1,1,1,0,0,0,1,1,1,1,
                1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,
                1,2,1,1,1,1,1,1],
               [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,
                1,1,1,1,1,1,1,1],
               [1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,
                1,1,1,1,1,1,2,1],
               [1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,
                0,1,1,2,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,
                1,1,2,1,1,1,1,1],
               [1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,0,0,0,0,
                0,1,1,2,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,
                1,1,2,1,1,1,1,1],
               [1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,
                2,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,
                2,1,1,1,1,1,1,1],
               [1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,
                2,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,
                1,2,1,1,1,1,1,1],
               [1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,
                2,1,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,
                1,1,1,1,1,1,1,1],
               [1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,
                2,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,
                1,1,1,1,1,2,1,1],
               [1,1,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,2,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,2,2,2,2,
                1,1,1,0,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,
                2,1,1,1,1,1,1,1],
               [1,1,1,1,1,1,2,2,2,0,1,1,1,2,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,2,2,
                2,2,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,
                1,1,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,
                1,1,1,2,1,1,1,1],
               [1,1,1,1,1,1,2,2,2,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,
                1,2,1,2,2,2,2,2,2,2,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,
                1,1,1,1,1,1,1,1],
               [1,1,1,1,1,1,2,2,2,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,0,2,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,2,2,0,0,0,0,
                0,2,2,1,2,2,2,2,2,2,2,1,1,0,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,
                1,1,1,1,1,2,1,1],
               [2,1,1,1,1,1,1,2,2,1,1,1,1,1,0,1,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,
                1,1,1,1,1,1,1,1],
               [2,1,1,1,1,1,1,2,2,1,1,1,1,1,0,1,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,
                1,2,1,1,1,1,1,1],
               [2,1,1,1,1,1,1,2,2,1,1,1,1,1,0,1,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,
                1,1,1,1,1,1,1,1],
               [2,1,1,1,1,1,1,2,2,1,1,1,1,1,0,1,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,
                1,1,2,1,1,1,1,1],
               [2,1,1,1,1,1,1,2,2,1,1,1,1,1,0,1,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,
                1,1,1,2,1,1,1,1],
               [2,1,1,1,1,1,1,2,2,1,1,1,1,1,0,1,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1],
               [2,1,1,1,1,1,1,2,2,1,1,1,1,1,0,1,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1],
               [1,1,1,1,2,1,1,1,1,0,1,1,1,1,1,2,1,1,1,1,1,2,2,2,1,1,1,1,2,1,1,
                1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1],
               [2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,0,1,1,1,1,2,2,2,1,2,2,2,
                2,2,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1],
               [1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,
                2,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1],
               [1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1],
               [2,1,1,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,2,1,2,1,1,2,1,1,1,1,1,
                1,1,1,2,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1,2,1,1,1,1,1,1,1,2,1,
                1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,
                1,1,1,1,1,1,1,1],
               [1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,
                1,1,1,1,1,1,1,1],
               [1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,2,
                1,1,1,1,1,2,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,
                1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,
                1,1,1,1,1,1,1,1],
               [1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,
                1,1,1,1,1,1,1,1],
               [1,2,1,1,1,1,1,1,2,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,
                2,1,1,1,2,1,1,1,1,1,1,1,2,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,1,
                2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                2,1,1,1,1,1,1,1],
               [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,2,1,
                1,1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,2,1,2,1,1,1,1,1,2,1,1,
                1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,2,1,1,1,1,1,1],
               [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,
                1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,2,1,1,1,1,1],
               [1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,2,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,2,1,1,1,1],
               [1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,2,1,1,1],
               [1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,2,1,1,
                1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,
                1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,2,1,1],
               [1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,2,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,2,1],
               [1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,2],
               [2,1,1,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,2,1,2,1,1,2,1,1,1,1,1,
                1,1,1,2,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1,2,1,1,1,1,1,1,1,2,1,
                1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1],
               [1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1],
               [1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,2,
                1,1,1,1,1,2,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,
                1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1],
               [1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1],
               [1,2,1,1,1,1,1,1,2,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,
                2,1,1,1,2,1,1,1,1,1,1,1,2,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,1,
                2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1],
               [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,2,1,
                1,1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,2,1,2,1,1,1,1,1,2,1,1,
                1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1],
               [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,
                1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1],
               [1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,2,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1],
               [1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1],
               [1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,2,1,1,
                1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,
                1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1],
               [1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,2,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,
                1,1,1,1,1,1,1,1],
               [1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,
                1,1,1,1,1,1,1,1]]
changedChem=[]
for L in defaultChem:
    changedChem.append(L.copy())
defaultStat = [[0,0,0,2,2,1,1,1,0,7,75,55,50,70,30,70,70,60,6,7,6,7,122,139,70,50,0,0,87,0],
               [0,1,2,2,2,1,2,2,2,0,70,50,40,60,30,70,60,70,6,6,7,7,124,138,60,50,0,0,70,0],
               [0,1,1,0,4,1,3,3,9,0,50,30,60,90,10,20,85,30,6,9,3,2,136,150,30,75,1,0,90,0],
               [0,1,3,2,1,1,4,4,9,0,65,45,20,40,40,65,40,84,5,4,8,6,125,134,55,30,0,0,65,0],
               [0,0,0,2,2,1,5,5,12,0,80,60,20,40,50,50,40,80,9,4,8,5,121,130,80,20,2,0,63,0],
               [0,1,1,1,2,1,6,6,1,0,70,50,40,60,40,50,60,80,7,6,8,5,124,140,65,30,0,0,66,0],
               [0,1,2,2,2,1,9,9,3,0,55,35,30,45,40,90,40,55,4,4,6,9,126,135,40,40,2,0,60,0],
               [0,0,2,2,0,0,0,0,0,7,60,40,20,30,40,80,30,40,5,3,4,8,110,118,60,20,2,0,46,1],
               [0,1,2,2,0,0,0,0,2,0,55,35,10,20,40,80,20,50,5,2,5,8,109,119,60,20,2,0,45,2],
               [0,1,1,0,4,1,11,11,0,5,45,25,65,98,10,29,98,32,5,10,3,3,140,152,13,99,1,0,100,0],
               [0,0,3,1,3,1,7,7,11,0,60,40,50,80,10,40,80,30,5,8,3,4,132,147,35,62,0,0,98,0],
               [1,1,3,1,3,1,8,8,12,0,5,80,90,1,50,50,40,80,8,4,8,5,130,90,80,30,0,1,59,0],
               [0,1,2,2,1,0,0,0,0,5,70,50,30,50,30,64,50,45,3,6,4,6,121,138,50,40,2,0,56,1],
               [0,0,2,2,0,0,0,0,0,7,55,35,30,50,30,70,50,30,5,5,3,7,114,140,47,40,1,0,52,1],
               [1,1,2,2,1,0,0,0,0,4,75,55,20,30,40,44,30,32,9,3,3,5,112,132,89,32,0,1,43,2],
               [0,0,0,2,0,0,0,0,0,7,70,50,20,30,30,80,30,40,5,3,4,8,122,128,53,30,2,0,41,2],
               [0,1,3,2,1,0,0,0,1,0,60,40,35,55,44,45,55,70,4,5,7,4,116,130,42,40,2,0,62,3],
               [0,0,1,1,3,1,10,10,4,0,60,40,48,78,20,50,80,70,4,8,7,5,132,147,38,50,0,0,88,0],
               [0,1,2,2,1,0,0,0,0,6,65,45,30,50,60,70,50,55,4,4,5,7,116,138,45,40,2,0,34,3],
               [1,0,3,1,2,1,12,12,0,5,75,55,50,70,20,70,68,42,5,7,4,7,95,135,37,50,0,0,83,0],
               [0,1,0,2,1,0,0,0,2,0,60,40,30,50,37,52,55,70,4,4,7,5,116,138,41,32,2,0,55,2],
               [0,0,2,2,4,0,0,0,11,0,55,35,52,82,20,20,80,35,5,8,4,2,132,147,32,61,1,0,67,1],
               [0,0,2,2,4,0,0,0,11,0,55,35,52,82,20,20,80,41,4,8,4,2,132,147,20,61,1,0,67,1],
               [0,0,2,2,4,0,0,0,11,0,55,35,52,82,20,25,80,35,4,8,4,2,132,147,20,61,1,0,67,1],
               [0,1,0,2,1,0,0,0,10,0,60,40,20,40,40,70,40,40,5,4,4,7,116,138,58,30,2,0,42,2],
               [0,1,0,2,1,0,0,0,10,0,60,40,20,40,40,70,40,45,4,4,5,7,120,132,49,30,2,0,42,2],
               [0,1,0,2,1,0,0,0,10,0,65,45,25,45,45,70,45,40,4,5,4,7,120,132,49,30,2,0,42,2],
               [0,0,1,0,3,0,0,0,7,0,60,25,10,85,10,30,85,55,4,7,6,3,128,147,20,64,1,0,69,1],
               [0,0,0,1,0,0,0,0,0,7,65,45,20,30,50,35,60,78,7,3,7,3,70,80,20,20,2,0,33,2],
               [0,0,2,2,0,0,0,0,0,7,60,40,45,65,30,70,50,30,4,6,3,7,110,138,42,40,1,0,52,1],
               [0,0,2,2,0,0,0,0,0,7,60,40,45,65,30,70,55,35,3,6,4,7,115,130,33,40,1,0,52,1],
               [0,0,2,2,0,0,0,0,0,7,55,35,30,50,30,70,55,35,4,5,4,7,110,138,42,40,1,0,52,1],
               [0,0,2,2,0,0,0,0,0,7,60,40,45,65,30,70,55,25,5,6,2,7,114,140,47,40,1,0,52,1],
               [0,1,0,2,2,0,0,0,5,0,50,30,20,30,30,20,40,80,8,2,8,2,119,125,81,30,0,1,31,3],
               [0,1,0,2,2,0,0,0,5,0,55,35,25,35,30,14,40,80,8,3,8,1,119,125,81,30,0,1,31,3],
               [0,1,0,2,2,0,0,0,5,0,50,30,20,30,30,25,40,80,7,2,8,2,99,105,77,30,0,1,31,3],
               [0,1,0,2,2,0,0,0,5,0,55,35,25,35,30,20,40,80,7,3,8,2,99,105,77,30,0,1,31,3],
               [0,0,1,0,3,0,0,0,0,4,65,45,50,70,20,40,70,30,7,7,3,4,108,122,75,20,0,1,49,2],
               [0,1,1,0,4,0,0,0,6,0,45,25,62,92,10,20,90,48,4,10,5,2,150,175,5,78,1,0,20,1],
               [0,1,0,2,1,0,0,0,9,0,60,40,20,35,30,72,40,80,3,3,8,7,120,130,30,25,0,1,48,2],
               [0,0,2,2,0,0,0,0,10,0,60,40,20,40,90,40,50,60,6,3,6,4,90,95,42,100,2,0,61,1],
               [0,0,0,2,0,0,0,0,2,0,60,40,20,40,50,50,45,65,6,3,7,5,110,122,47,70,2,0,58,2],
               [0,1,2,2,1,0,0,0,0,5,70,50,30,50,30,64,40,35,4,6,3,6,126,135,55,40,2,0,56,1],
               [0,1,0,2,1,0,0,0,2,0,65,45,35,55,37,52,55,70,3,5,7,5,120,135,35,30,2,0,55,2],
               [0,1,3,2,1,0,0,0,1,0,55,35,30,50,44,45,55,70,5,4,7,4,116,135,53,44,2,0,62,3],
               [0,1,3,2,1,0,0,0,1,0,55,35,30,50,44,55,55,70,4,4,7,5,116,130,42,40,2,0,62,3],
               [0,1,3,2,1,0,0,0,1,0,60,40,35,55,44,55,55,70,3,5,7,5,116,125,40,38,2,0,62,3],
               [0,1,3,2,1,0,0,0,1,0,55,35,30,50,44,45,55,75,4,4,8,4,116,130,42,40,2,0,62,3],
               [1,1,0,0,1,0,0,0,0,1,65,45,55,75,20,50,70,41,4,7,4,5,128,142,41,50,1,0,44,1],
               [1,1,0,0,1,0,0,0,0,1,65,45,55,75,20,57,70,41,3,7,4,6,128,137,37,45,1,0,44,1],
               [1,1,0,0,1,0,0,0,0,1,65,45,55,75,20,50,70,38,5,7,4,5,125,147,46,50,1,0,44,1],
               [1,1,0,0,1,0,0,0,0,1,65,45,55,75,20,50,70,49,3,7,5,5,128,137,37,45,1,0,44,1],
               [0,0,1,0,3,0,0,0,7,0,55,20,10,88,10,30,85,55,3,8,6,3,132,150,15,64,1,0,69,1],
               [0,0,1,0,3,0,0,0,7,0,55,20,10,85,10,30,80,50,5,7,5,3,128,147,63,40,0,1,69,2],
               [0,1,2,0,4,0,0,0,0,3,55,35,50,70,20,75,70,42,3,7,4,7,128,142,27,55,1,0,82,1],
               [0,1,0,2,2,0,0,0,0,2,70,50,30,50,60,50,50,50,6,4,5,6,100,112,46,34,2,0,57,3],
               [1,0,1,1,4,0,0,0,9,0,60,30,50,80,10,30,80,60,4,8,6,3,142,110,22,88,1,0,85,1],
               [0,1,0,2,2,0,0,0,9,0,68,50,30,50,50,55,40,75,5,5,7,5,126,135,54,40,0,0,64,2],
               [0,1,1,0,3,0,0,0,8,0,60,40,50,70,20,35,75,70,4,7,7,3,118,142,31,59,1,0,68,1],
               [0,1,1,0,3,0,0,0,8,0,55,35,45,65,20,35,75,70,5,6,7,3,114,146,31,64,1,0,68,1],
               [0,1,1,0,3,0,0,0,8,0,55,35,55,75,20,35,75,70,3,8,7,3,122,138,24,59,1,0,68,1],
               [0,1,1,0,3,0,0,0,8,0,55,35,50,70,20,40,75,70,3,7,7,4,122,138,24,59,1,0,68,1],
               [1,0,1,1,4,0,0,0,11,0,70,18,64,94,10,10,90,20,6,10,2,1,135,155,48,85,1,0,38,1],
               [0,0,0,2,0,0,0,0,12,0,70,55,15,25,50,60,30,50,8,2,5,6,105,117,80,20,2,0,30,2],
               [0,1,1,1,0,0,0,0,1,0,70,50,20,40,50,60,40,50,6,4,5,6,115,122,65,20,2,0,35,3],
               [0,1,2,1,0,0,0,0,9,0,55,40,50,65,55,40,70,82,3,6,8,4,118,132,30,50,2,1,47,1],
               [0,1,2,2,2,0,0,0,3,0,60,45,30,45,35,80,40,42,3,4,4,8,116,130,35,40,2,0,60,3],
               [0,1,2,2,2,0,0,0,3,0,50,40,25,35,35,80,35,50,4,2,6,8,126,135,45,40,2,0,60,3],
               [0,1,2,2,2,0,0,0,3,0,60,45,30,45,40,75,35,50,3,4,6,7,112,130,35,40,2,0,60,3],
               [0,1,2,2,2,0,0,0,3,0,55,45,30,40,35,80,35,50,3,3,6,8,112,130,35,40,2,0,60,3],
               [0,1,2,2,2,0,0,0,3,0,55,45,30,40,35,85,35,50,2,3,6,9,115,127,30,40,2,0,60,3],
               [0,1,2,2,2,0,0,0,3,0,55,35,30,45,40,90,40,55,4,4,6,9,126,135,40,0,2,0,60,3],
               [0,1,2,2,2,0,0,0,3,0,55,35,30,45,40,90,40,55,4,4,6,9,126,135,40,0,2,0,60,3],
               [0,0,2,2,0,0,0,0,0,7,55,35,30,50,30,70,50,30,5,5,3,7,114,140,47,0,0,0,60,0],
               [0,0,2,2,4,0,0,0,11,0,55,35,52,82,20,20,80,35,5,8,4,2,132,147,32,0,0,0,60,0],
               [0,1,1,0,3,0,0,0,8,0,60,40,50,70,20,35,75,70,4,7,7,3,118,142,31,0,0,0,60,0],
               [0,1,2,2,1,0,0,0,0,5,70,50,30,50,30,64,50,45,3,6,4,6,121,138,50,0,0,0,60,0],
               [0,0,0,2,2,0,0,0,12,0,65,45,45,65,40,60,60,60,6,6,6,6,130,142,50,40,2,0,75,1],
               [0,0,0,2,2,0,0,0,12,0,65,45,45,65,40,60,60,60,6,6,6,6,130,142,50,40,2,0,75,1],
               [0,0,0,2,2,0,0,0,12,0,65,45,45,65,40,60,60,60,6,6,6,6,130,142,50,40,2,0,75,2],
               [0,0,0,2,2,0,0,0,12,0,65,45,45,65,40,60,60,60,6,6,6,6,130,142,50,40,2,0,75,1],
               [0,0,0,2,2,0,0,0,12,0,65,45,45,65,40,60,60,60,6,6,6,6,130,142,50,40,2,0,75,2],
               [0,0,0,2,2,0,0,0,12,0,65,45,45,65,40,60,60,60,6,6,6,6,130,142,50,40,2,0,75,3],
               [0,0,0,2,2,0,0,0,12,0,65,45,45,65,40,60,60,60,6,6,6,6,130,142,50,40,2,0,75,3],
               [0,0,0,2,2,0,0,0,12,0,65,45,45,65,40,60,60,60,6,6,6,6,130,142,50,40,2,0,75,1],
               [0,0,0,2,2,0,0,0,12,0,65,45,45,65,40,60,60,60,6,6,6,6,130,142,50,40,2,0,75,1],
               [0,0,0,2,2,0,0,0,12,0,65,45,45,65,40,60,60,60,6,6,6,6,130,142,50,40,2,0,75,2],
               [0,0,0,2,2,0,0,0,12,0,65,45,45,65,40,60,60,60,6,6,6,6,130,142,50,40,2,0,75,2],
               [0,0,0,2,2,0,0,0,12,0,65,45,45,65,40,60,60,60,6,6,6,6,130,142,50,40,2,0,75,1],
               [0,1,0,2,2,0,0,0,12,0,65,45,45,65,40,60,60,60,6,6,6,6,130,142,50,40,2,0,75,1],
               [0,1,0,2,2,0,0,0,12,0,65,45,45,65,40,60,60,60,6,6,6,6,130,142,50,40,2,0,75,1],
               [0,1,0,2,2,0,0,0,12,0,65,45,45,65,40,60,60,60,6,6,6,6,130,142,50,40,2,0,75,2],
               [0,1,0,2,2,0,0,0,12,0,65,45,45,65,40,60,60,60,6,6,6,6,130,142,50,40,2,0,75,1],
               [0,1,0,2,2,0,0,0,12,0,65,45,45,65,40,60,60,60,6,6,6,6,130,142,50,40,2,0,75,2],
               [0,1,0,2,2,0,0,0,12,0,65,45,45,65,40,60,60,60,6,6,6,6,130,142,50,40,2,0,75,3],
               [0,1,0,2,2,0,0,0,12,0,65,45,45,65,40,60,60,60,6,6,6,6,130,142,50,40,2,0,75,3],
               [0,1,0,2,2,0,0,0,12,0,65,45,45,65,40,60,60,60,6,6,6,6,130,142,50,40,2,0,75,1],
               [0,1,0,2,2,0,0,0,12,0,65,45,45,65,40,60,60,60,6,6,6,6,130,142,50,40,2,0,75,1],
               [0,1,0,2,2,0,0,0,12,0,65,45,45,65,40,60,60,60,6,6,6,6,130,142,50,40,2,0,75,2],
               [0,1,0,2,2,0,0,0,12,0,65,45,45,65,40,60,60,60,6,6,6,6,130,142,50,40,2,0,75,2],
               [0,1,0,2,2,0,0,0,12,0,65,45,45,65,40,60,60,60,6,6,6,6,130,142,50,40,2,0,75,1]]
changedStat=[]
for L in defaultStat:
    changedStat.append(L.copy())
defaultTraj = [[0,10,20,30,40,20,20,20,20,20,10,25,30,25,10,20,20,20,20,20,40,30,20,10,0],
               [0,10,20,30,40,10,35,30,15,10,5,25,40,25,5,10,35,30,15,10,40,30,20,10,0],
               [20,5,0,5,70,15,20,30,30,5,20,35,15,15,15,15,30,30,20,5,70,5,0,5,20],
               [20,5,0,5,70,5,20,40,30,5,20,35,15,15,15,5,30,40,20,5,70,5,0,5,20],
               [0,10,20,30,40,5,5,15,40,35,5,5,20,40,35,5,5,15,40,35,40,30,20,10,0],
               [0,10,20,30,40,5,5,15,40,35,5,5,20,40,35,5,5,15,40,35,40,30,20,10,0],
               [5,0,10,40,45,5,21,12,29,33,5,23,15,37,20,5,21,12,29,33,5,0,10,40,45],
               [5,0,10,40,45,5,21,12,29,33,5,23,15,27,30,5,21,12,29,33,5,0,10,40,45],
               [10,20,20,20,30,35,40,15,5,5,30,40,20,5,5,35,40,15,5,5,40,30,20,5,5],
               [10,20,20,20,30,35,40,15,5,5,30,40,20,5,5,35,40,15,5,5,40,30,20,5,5],
               [10,0,20,30,40,35,30,22,10,3,30,30,25,15,0,35,30,22,10,3,10,0,20,30,40],
               [10,0,20,30,40,35,30,22,10,3,30,30,25,15,0,35,30,22,10,3,10,0,20,30,40],
               [50,30,20,0,0,10,50,40,0,0,10,60,30,0,0,10,50,40,0,0,50,30,20,0,0],
               [50,30,20,0,0,10,50,40,0,0,10,60,30,0,0,10,50,40,0,0,50,30,20,0,0],
               [0,10,20,30,40,10,40,40,10,0,0,10,37,48,5,10,40,40,10,0,0,10,20,30,40],
               [0,10,20,30,40,10,40,40,10,0,0,10,37,48,5,10,40,40,10,0,0,10,20,30,40],
               [20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20],
               [20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20],
               [20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20],
               [20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20],
               [20,20,20,20,20,10,20,20,20,30,10,20,20,20,30,10,20,20,20,30,20,20,20,20,20],
               [20,20,20,20,20,10,20,20,20,30,10,20,20,20,30,10,20,20,20,30,20,20,20,20,20],
               [20,20,20,20,20,30,20,20,20,10,30,20,20,20,10,30,20,20,20,10,20,20,20,20,20],
               [20,20,20,20,20,30,20,20,20,10,30,20,20,20,10,30,20,20,20,10,20,20,20,20,20]]
changedTraj=[]
for L in defaultTraj:
    changedTraj.append(L.copy())

def getGroupSize(n):
    if n==27 or n==30 or (n>=82 and n%3==1 and n<=115):
        return 2
    if n==10 or n==46 or n==53:
        return 3
    if n==18 or n==33 or n==39:
        return 4
    if n==57 or n==64:
        return 5
    if n==75:
        return 6
    return 1

#Chem functions

def currentChem():
    chemRecap.configure(state="normal")
    chemRecap.delete("0.0",tk.END)
    L = chemRecap.tag_names()
    for tag in L:
        chemRecap.tag_delete(L)
    nlines=0
    start=chemFrom.get()
    if start=="Pick a character/group":
        start=-1 
    else:
        startIndex=comboList.index(start)
        startGroupSize=getGroupSize(startIndex)
        if startGroupSize!=1:
            startIndex = startIndex+1
    end=chemTo.get()
    if end=="Pick a character/group":
        end=-1
    else:
        endIndex=comboList.index(end)
        endGroupSize=getGroupSize(endIndex)
        if endGroupSize!=1:
            endIndex = endIndex+1
    if start!=-1:
        chemRecap.insert(tk.END,start.lstrip()+" has chem with:\n")
        nlines=nlines+1
        for i in range(101):
            chem=-1
            for j in range(startIndex,startIndex+startGroupSize):
                player=charList.index(comboList[j].lstrip())
                if chem==-1:
                    chem=changedChem[player][i]
                elif changedChem[player][i]!=chem:
                    chem=3
            if chem!=1:
                if chem==0:
                    color="red" 
                elif chem==2:
                    color="green"
                else:
                    color="gray"
                nlines=nlines+1
                chemRecap.insert(tk.END,"   "+charList[i]+"\n")
                chemRecap.tag_add("lasttext"+str(nlines), str(nlines)+".0", str(nlines)+".0 lineend")
                chemRecap.tag_config("lasttext"+str(nlines),foreground=color)
    if end!=-1:
        chemRecap.insert(tk.END,end.lstrip()+" has chem with:\n")
        nlines=nlines+1
        for i in range(101):
            chem=-1
            for j in range(endIndex,endIndex+endGroupSize):
                player=charList.index(comboList[j].lstrip())
                if chem==-1:
                    chem=changedChem[player][i]
                elif changedChem[player][i]!=chem:
                    chem=3
            if chem!=1:
                if chem==0:
                    color="red"
                elif chem==2:
                    color="green"
                else:
                    color="gray"
                nlines=nlines+1
                chemRecap.insert(tk.END,"   "+charList[i]+"\n")
                chemRecap.tag_add("lasttext"+str(nlines), str(nlines)+".0", str(nlines)+".0 lineend")
                chemRecap.tag_config("lasttext"+str(nlines),foreground=color)
    chemRecap.configure(state="disabled")                

def dirChange():
    chemText.configure(text="to")
    chemColor()

def dirReset():
    chemText.configure(text="with")
    chemColor()

def chemColor(*args):
    currentChem()
    start=chemFrom.get()
    end=chemTo.get()
    if (start=="Pick a character/group" or end=="Pick a character/group"):
        return
    startIndex=comboList.index(start)
    startGroupSize=getGroupSize(startIndex)
    if startGroupSize!=1:
        startIndex = startIndex+1
    endIndex=comboList.index(end)
    endGroupSize=getGroupSize(endIndex)
    if endGroupSize!=1:
        endIndex = endIndex+1
    chem=4
    for i in range(startIndex,startIndex+startGroupSize):
        istartIndex=charList.index(comboList[i].lstrip())
        for j in range(endIndex,endIndex+endGroupSize):
            jendIndex=charList.index(comboList[j].lstrip())
            if chem==4:
                chem=changedChem[istartIndex][jendIndex]
            else :
                if chem!=changedChem[istartIndex][jendIndex]:
                    chem=3
            if directionVar.get()!=1:
                if chem!=changedChem[jendIndex][istartIndex]:
                    chem=3
    if chem==0:
        color="red"
    elif chem==1:
        color="blue"
    elif chem==2:
        color="green"
    else:
        color="gray"
    chemText.configure(fg=color)
    
def simpleChemChange(start,end,chem,direction):
    changedChem[start][end]=chem
    if direction==2:
        changedChem[end][start]=chem
    
def changeChem():
    recapList.configure(state="normal")
    if directionVar.get()==0:
        recapList.insert(tk.END, "No direction set\n")
        recapList.configure(state="disabled")
        return
    if chemVar.get()==0:
        recapList.insert(tk.END, "No chemistry type set\n")
        recapList.configure(state="disabled")
        return
    start=chemFrom.get()
    if start=="Pick a character/group":
        recapList.insert(tk.END, "Pick a character/group\n")
        recapList.configure(state="disabled")
        return
    startIndex=comboList.index(start)
    startGroupSize=getGroupSize(startIndex)
    end=chemTo.get()
    if end=="Pick a character/group":
        recapList.insert(tk.END, "Pick a character/group\n")
        recapList.configure(state="disabled")
        return
    endIndex=comboList.index(end)
    endGroupSize=getGroupSize(endIndex)
    if startGroupSize!=1:
        startIndex = startIndex+1
    if endGroupSize!=1:
        endIndex = endIndex+1
    chem=chemVar.get()-1
    direction=directionVar.get()
    for i in range(startIndex,startIndex+startGroupSize):
        istartIndex=charList.index(comboList[i].lstrip())
        for j in range(endIndex,endIndex+endGroupSize):
            jendIndex=charList.index(comboList[j].lstrip())
            simpleChemChange(istartIndex, jendIndex,chem,direction)
    chemColor()
    if directionVar.get()==1:
        direction=" to "
    else:
        direction=" with "
    if chem==0:
        color="red"
    elif chem==1:
        color="blue"
    else:
        color="green"
    recapList.insert(tk.END,start.lstrip()+direction+end.lstrip()+"\n")
    nlines=recapList.count("0.0", tk.END, "lines")
    nlines=str(nlines[0]-1)
    recapList.tag_add("lasttext"+nlines, nlines+".0", nlines+".0 lineend")
    recapList.tag_config("lasttext"+nlines,foreground=color)
    recapList.configure(state="disabled")
    
def globalChem():
    global changedChem
    recapList.configure(state="normal")
    choice=chemResetVar.get()
    if choice==0:
        recapList.insert(tk.END, "No global option selected\n")
        recapList.configure(state="disabled")
        return
    if choice==1:
        changedChem=[]
        for L in defaultChem:
            changedChem.append(L.copy())
        recapList.insert(tk.END, "Chemistry reverted to default\n")
        recapList.configure(state="disabled")
        chemColor()
        return
    miis=chemGlobalMiiVar.get()
    n=77
    message=" (except miis) "
    if miis:
        n=101
        message=" "
    L0=[]
    for i in range(n):
        L0.append(choice-2)
    for i in range(n):
        L=L0.copy()
        if not miis:
            for j in range(77,101):
                L.append(changedChem[i][j])
        changedChem[i]=L.copy()
    if choice==2:
        recapList.insert(tk.END, "Every chemistry"+message+"set to bad\n")
    if choice==3:
        recapList.insert(tk.END, "Every chemistry"+message+"set to neutral\n")
    if choice==4:
        recapList.insert(tk.END, "Every chemistry"+message+"set to good\n")
    recapList.configure(state="disabled")
    chemColor()
    
def autoChem():
    for i in range(101):
        changedChem[i][i]=2
    recapList.configure(state="normal")
    recapList.insert(tk.END,"Everyone chem with themselves\n")
    recapList.configure(state="disabled")
    
def variantChem():
    for i in range(101):
        G=getRCGroup(i)
        if len(G)>1:
            for j in G:
                for k in G:
                    if j!=k:
                        changedChem[j][k]=2
    recapList.configure(state="normal")
    recapList.insert(tk.END,"Every variant chem with each other\n")
    recapList.configure(state="disabled")
    
def getRCGroup(i):
    if i==6:
        return [6,66,67,68,69,70] #yoshis
    if i==12:
        return [12,42] #koopa troopas
    if i==13:
        return [13,29,30,31,32] #toads
    if i==16:
        return [16,44,45,46,47] #shy guys
    if i==20:
        return [20,43] #paratroopas
    if i==21:
        return [21,22,23] #piantas
    if i==24:
        return [24,25,26] #nokis
    if i==27:
        return [27,52,53] #bros
    if i==33:
        return [33,34,35,36] #mags
    if i==48:
        return [48,49,50,51] #bones
    if i==58:
        return [58,59,60,61] #kritters
    if i>=77 and i<89:
        return [i,i+12] #miis
    if (i in range(6) or i in range(7,12) or i in range(14,16) or i in range(17,20)
        or i==28 or i in range(37,42) or i in range(54,58) or i in range(62,66)):
        return [i]
    return []
    
def chemFullRandom():
    d=chemScaleBad.get()+chemScaleGood.get()+chemScaleNeutral.get()
    pBad=chemScaleBad.get()/d
    pNeutral=(chemScaleBad.get()+chemScaleNeutral.get())/d
    n=71
    unusedChar=chemRandomUnusedVar.get()
    randomMii = chemRandomMiiVar.get()
    if unusedChar:
        n=77
    if randomMii:
        n=n+24
    selfCheck=chemRandomSelfVar.get()
    assymetric=chemRandomAssymetricVar.get()
    if assymetric:
        direction=1
    else:
        direction=2
    for i in range(n):
        if not unusedChar and randomMii:
            i=i+6
        if assymetric:
            ran=range(n)
        else:
            ran=range(i,n)
        for j in ran:
            r=random()
            chem0=int(r>pBad)+int(r>pNeutral)
            if i==j and not selfCheck:
                chem=1
            else:
                chem=chem0
            if chemRandomVariantVar.get():
                simpleChemChange(i, j, chem, direction)
            else:
                start=getRCGroup(i)
                end=getRCGroup(j)
                for istart in start:
                    for jend in end:
                        simpleChemChange(istart, jend, chem, direction)
    if chemRandomColorVar.get():
        mini=chemRCMin.get()
        maxi=chemRCMax.get()
        colorCount=[0,0,0,0,0,0,0,0,0,0,0,0]
        colorIndexes=[0,1,2,3,4,5,6,7,8,9,10,11]
        nIndexes=12
        nRemaining=71
        final=0
        for i in range(71):
            r=randint(0,n-1)
            index=colorIndexes[r]
            simpleChemChange(i, 77+index, 2, 2)
            simpleChemChange(i, 89+index, 2, 2)
            colorCount[index]=colorCount[index]+1
            nRemaining=nRemaining+1
            if colorCount[index]==maxi:
                nIndexes=nIndexes-1
                colorIndexes.remove(index)
            if final==0:
                for j in colorCount:
                    temp=colorCount[j]*(colorCount[j]<mini)
                if temp==nRemaining:
                    final=1
                    maxi=mini
                    for j in colorIndexes:
                        if colorCount[j]==maxi:
                            colorIndexes.remove(j)
    recapList.configure(state="normal")
    recapList.insert(tk.END, "Chemistry fully randomized\n")
    recapList.configure(state="disabled")
                    

def chemGraphRandom():
    recapList.configure(state="normal")
    recapList.insert(tk.END, "Not implemented yet\n")
    recapList.configure(state="disabled")

def enableRCColors():
    if chemRandomMiiVar.get():
        chemRandomColors.deselect()
        chemRandomColors.configure(state=tk.DISABLED)
        chemRCMax.configure(state=tk.DISABLED)
        chemRCMin.configure(state=tk.DISABLED)
        chemRCLabel1.configure(state=tk.DISABLED)
        chemRCLabel2.configure(state=tk.DISABLED)
        return
    chemRandomColors.configure(state=tk.NORMAL)
    chemRCMax.configure(state="readonly")
    chemRCMin.configure(state="readonly")
    chemRCLabel1.configure(state=tk.NORMAL)
    chemRCLabel2.configure(state=tk.NORMAL)
    
#Stats Functions
    
def statCheckButton(name):
    var="sbStat"+name
    if eval("checkStat"+name).getvar(eval("checkStat"+name).cget("variable"))=="0":
        eval(var).configure(state="disabled")
    else:
        state="normal"
        if name in ["0","1","2","5","6","7","8","9","26","27","29"]:
            state="readonly"
        if name=="7" and sbStat5.get()!="Yes":
            state="disabled"
        eval(var).configure(state=state)

def statDisplay(clear):
    if(cbPlayer.get()=="Pick a character/group"):
        return
    if clear:
        cbPlayer.set("Pick a character/group")
    else:
        index=comboList.index(cbPlayer.get())
        size=getGroupSize(index)
        if size!=1:
            index = index+1
    for i in range(30):
        if clear:
            stat=""
        else:
            statmin=-1
            statmax=-1
            for j in range(index,index+size):
                player=charList.index(comboList[j].lstrip())
                if statmin==-1:
                    statmin=changedStat[player][i]
                    statmax=statmin
                elif i not in [0,1,2,5,6,7,8,9,26,27,29]:
                    value=changedStat[player][i]
                    if statmin>value:
                        statmin=value
                    elif statmax<value:
                        statmax=value
                else:
                    if statmin!=changedStat[player][i]:
                        statmin=-2                
            if statmin==-2:
                stat=""
            elif i==0 or i==1:
                stat=["Right","Left"][statmin]
            elif i==2:
                stat=classList[statmin]
            elif i==5:
                stat=["No","Yes"][statmin]
                statAllowSwing(statmin)
            elif i==6:
                stat=starPitchList[statmin]
            elif i==7:
                stat=starSwingList[statmin]
            elif i==8:
                stat=fieldingAbilitiesList[statmin]
            elif i==9:
                stat=baserunningAbilitiesList[statmin]
            elif i==26:
                stat=trajList[statmin]
            elif i==27:
                stat=["Disabled","Enabled"][statmin]
            elif i==29:
                stat=starPitchTypeList[statmin]
            elif statmin==statmax:
                stat=statmin
            else:
                stat=str(statmin)+" - "+str(statmax)
        eval("sbStat"+str(i)).set(stat)
        
def statPlayerChange(event):
    statDisplay(0)
        
def statAllowSwing(activate):
    if checkStat7.getvar(checkStat7.cget("variable"))=="1":
        if activate:
            state="readonly"
        else:
            state="disable"
        sbStat7.configure(state=state)
    
def statCaptainChange(event):
    if sbStat5.get()=="Yes":
        statAllowSwing(1)
    else:
        statAllowSwing(0)
    
def changeStats():
    recapList.configure(state="normal")
    group=cbPlayer.get()
    if group=="Pick a character/group":
        recapList.insert(tk.END, "Pick a character/group\n")
        recapList.configure(state="disabled")
        return
    index=comboList.index(group)
    size=getGroupSize(index)
    if size!=1:
        index = index+1
    message=""
    for i in range(30):
        if eval("checkStat"+str(i)).getvar(eval("checkStat"+str(i)).cget("variable"))=="1":
            var="sbStat"+str(i)
            stat=eval(var).get()
            if i==0 or i==1:
                if stat=="Right":
                    stat=0
                elif stat=="Left":
                    stat=1
                else:
                    recapList.insert(tk.END, "Unexpected stance value\n")
                    recapList.configure(state="disabled")
                    return
            elif i==2:
                if stat in classList:
                    stat = classList.index(stat)
                else:
                    recapList.insert(tk.END, "Unexpected character class value\n")
                    recapList.configure(state="disabled")
                    return
            elif i==5:
                if stat=="No":
                    stat=0
                elif stat=="Yes":
                    stat=1
                else:
                    recapList.insert(tk.END, "Unexpected captain value\n")
                    recapList.configure(state="disabled")
                    return
            elif i==6:
                if stat in starPitchList:
                    stat = starPitchList.index(stat)
                else:
                    recapList.insert(tk.END, "Unexpected star pitch value\n")
                    recapList.configure(state="disabled")
                    return
            elif i==7:
                if stat in starSwingList:
                    stat = starSwingList.index(stat)
                else:
                    recapList.insert(tk.END, "Unexpected star swing value\n")
                    recapList.configure(state="disabled")
                    return
            elif i==8:
                if stat in fieldingAbilitiesList:
                    stat = fieldingAbilitiesList.index(stat)
                else:
                    recapList.insert(tk.END, "Unexpected fielding ability value\n")
                    recapList.configure(state="disabled")
                    return
            elif i==9:
                if stat in baserunningAbilitiesList:
                    stat = baserunningAbilitiesList.index(stat)
                else:
                    recapList.insert(tk.END, "Unexpected baserunning ability value\n")
                    recapList.configure(state="disabled")
                    return
            elif i==26:
                if stat in trajList:
                    stat = trajAllList.index(stat)
                else:
                    recapList.insert(tk.END, "Unexpected hit trajectory value\n")
                    recapList.configure(state="disabled")
                    return
            elif i==27:
                if stat=="Disabled":
                    stat=0
                elif stat=="Enabled":
                    stat=1
                else:
                    recapList.insert(tk.END, "Unexpected hit curve value\n")
                    recapList.configure(state="disabled")
                    return
            elif i==29:
                if stat in starPitchTypeList:
                    stat = starPitchTypeList.index(stat)
                else:
                    recapList.insert(tk.END, "Unexpected star pitch type value\n")
                    recapList.configure(state="disabled")
                    return
            else:
                if stat.isdecimal()==False:
                    recapList.insert(tk.END, "Unexpected non-numerical value(s)\n")
                    recapList.configure(state="disabled")
                    return
                low=eval(var).cget("from")
                high=eval(var).cget("to")
                stat=int(stat)
                if stat<low:
                    stat=low
                    eval(var).set(str(low))
                elif stat>high:
                    stat=high
                    eval(var).set(str(high))
            message=message+" "+statsList[i]+","
            for j in range(index,index+size):
                player=charList.index(comboList[j].lstrip())
                changedStat[player][i]=stat
    if message!="":
        message=message.rstrip(",")
        if message.find(",")!=-1:
            message1=message.rsplit(", ",1)
            message=message1[0]+" and "+message1[1]
        group=group.lstrip()+"'"
        if group[-2]!="s":
            group=group+"s"
        recapList.insert(tk.END,group+message+" changed\n")
        recapList.configure(state="disabled")

def changeStatsE():
    recapList.configure(state="normal")
    message=""
    for i in range(30):
        if eval("checkStat"+str(i)).getvar(eval("checkStat"+str(i)).cget("variable"))=="1":
            var="sbStat"+str(i)
            stat=eval(var).get()
            if i==0 or i==1:
                if stat=="Right":
                    stat=0
                elif stat=="Left":
                    stat=1
                else:
                    recapList.insert(tk.END, "Unexpected stance value\n")
                    recapList.configure(state="disabled")
                    return
            elif i==2:
                if stat in classList:
                    stat = classList.index(stat)
                else:
                    recapList.insert(tk.END, "Unexpected character class value\n")
                    recapList.configure(state="disabled")
                    return
            elif i==5:
                if stat=="No":
                    stat=0
                elif stat=="Yes":
                    stat=1
                else:
                    recapList.insert(tk.END, "Unexpected captain value\n")
                    recapList.configure(state="disabled")
                    return
            elif i==6:
                if stat in starPitchList:
                    stat = starPitchList.index(stat)
                else:
                    recapList.insert(tk.END, "Unexpected star pitch value\n")
                    recapList.configure(state="disabled")
                    return
            elif i==7:
                if stat in starSwingList:
                    stat = starSwingList.index(stat)
                else:
                    recapList.insert(tk.END, "Unexpected star swing value\n")
                    recapList.configure(state="disabled")
                    return
            elif i==8:
                if stat in fieldingAbilitiesList:
                    stat = fieldingAbilitiesList.index(stat)
                else:
                    recapList.insert(tk.END, "Unexpected fielding ability value\n")
                    recapList.configure(state="disabled")
                    return
            elif i==9:
                if stat in baserunningAbilitiesList:
                    stat = baserunningAbilitiesList.index(stat)
                else:
                    recapList.insert(tk.END, "Unexpected baserunning ability value\n")
                    recapList.configure(state="disabled")
                    return
            elif i==26:
                if stat in trajList:
                    stat = trajAllList.index(stat)
                else:
                    recapList.insert(tk.END, "Unexpected hit trajectory value\n")
                    recapList.configure(state="disabled")
                    return
            elif i==27:
                if stat=="Disabled":
                    stat=0
                elif stat=="Enabled":
                    stat=1
                else:
                    recapList.insert(tk.END, "Unexpected hit curve value\n")
                    recapList.configure(state="disabled")
                    return
            elif i==29:
                if stat in starPitchTypeList:
                    stat = starPitchTypeList.index(stat)
                else:
                    recapList.insert(tk.END, "Unexpected star pitch type value\n")
                    recapList.configure(state="disabled")
                    return
            else:
                if stat.isdecimal()==False:
                    recapList.insert(tk.END, "Unexpected non-numerical value(s)\n")
                    recapList.configure(state="disabled")
                    return
                low=eval(var).cget("from")
                high=eval(var).cget("to")
                stat=int(stat)
                if stat<low:
                    stat=low
                    eval(var).set(str(low))
                elif stat>high:
                    stat=high
                    eval(var).set(str(high))
            message=message+" "+statsList[i]+","
            for j in range(101):
                changedStat[j][i]=stat
    if message!="":
        message=message.rstrip(",")
        if message.find(",")!=-1:
            message1=message.rsplit(", ",1)
            message=message1[0]+" and "+message1[1]
        recapList.insert(tk.END,"Everyone"+message+" changed\n")
        recapList.configure(state="disabled")

def resetStats():
    recapList.configure(state="normal")
    group=cbPlayer.get()
    if group=="Pick a character/group":
        recapList.insert(tk.END, "Pick a character/group\n")
        recapList.configure(state="disabled")
        return
    index=comboList.index(group)
    size=getGroupSize(index)
    if size!=1:
        index = index+1
    message=""
    for i in range(30):
        if eval("checkStat"+str(i)).getvar(eval("checkStat"+str(i)).cget("variable"))=="1":
            message=message+" "+statsList[i]+","
            for j in range(index,index+size):
                player=charList.index(comboList[j].lstrip())
                changedStat[player][i]=defaultStat[player][i]
    if message!="":
        message=message.rstrip(",")
        if message.find(",")!=-1:
            message1=message.rsplit(", ",1)
            message=message1[0]+" and "+message1[1]
        group=group.lstrip()+"'"
        if group[-2]!="s":
            group=group+"s"
        recapList.insert(tk.END,group+message+" reset\n")
        recapList.configure(state="disabled")
    statDisplay(0)

def resetStatsA():
    recapList.configure(state="normal")
    group=cbPlayer.get()
    if group=="Pick a character/group":
        recapList.insert(tk.END, "Pick a character/group\n")
        recapList.configure(state="disabled")
        return
    index=comboList.index(group)
    size=getGroupSize(index)
    if size!=1:
        index = index+1
    for j in range(index,index+size):
        player=charList.index(comboList[j].lstrip())
        changedStat[player]=defaultStat[player].copy()
    group=group.lstrip()+"'"
    if group[-2]!="s":
        group=group+"s"
    recapList.insert(tk.END,group+" all stats reset\n")
    recapList.configure(state="disabled")
    statDisplay(0)

def resetStatsE():
    recapList.configure(state="normal")
    message=""
    for i in range(30):
        if eval("checkStat"+str(i)).getvar(eval("checkStat"+str(i)).cget("variable"))=="1":
            message=message+" "+statsList[i]+","
            for j in range(101):
                changedStat[j][i]=defaultStat[j][i]
    if message!="":
        message=message.rstrip(",")
        if message.find(",")!=-1:
            message1=message.rsplit(", ",1)
            message=message1[0]+" and "+message1[1]
        recapList.insert(tk.END,"Everyone"+message+" reset\n")
        recapList.configure(state="disabled")
    if cbPlayer.get()=="Pick a character/group":
        statDisplay(1)
    else:
        statDisplay(0)

def resetStatsAE():
    global changedStat
    recapList.configure(state="normal")
    changedStat=[]
    for L in defaultStat:
        changedStat.append(L.copy())
    recapList.insert(tk.END,"Everyone all stats reset\n")
    recapList.configure(state="disabled")
    if cbPlayer.get()=="Pick a character/group":
        statDisplay(1)
    else:
        statDisplay(0)
    
#Stat Randomizer functions

def randCheckButton(name):
    var="randStat"+name
    n=int(name)
    if n in [10,11,12,13,14,15,16,17,22,23,24,28]:
        if eval("randCheckStat"+name).getvar(eval("randCheckStat"+name).cget("variable"))=="0":
            eval(var+"min").configure(state="disabled")
            eval(var+"max").configure(state="disabled")
            if randVariationVar.get()==1:
                eval(var+"range").configure(state="disabled")
        else:
            eval(var+"min").configure(state="normal")
            eval(var+"max").configure(state="normal")
            if randVariationVar.get()==1:
                eval(var+"range").configure(state="normal")
            
def refreshRandText():
    randRecap.configure(state="normal")
    randRecap.delete("0.0",tk.END)
    l=len(randPlayerList)
    if l==0:
        randRecap.insert(tk.END,"No character added to randomizer")
    else:
        for i in randPlayerList[:-1]:
            randRecap.insert(tk.END, comboList[i].lstrip()+", ")
        randRecap.insert(tk.END, comboList[randPlayerList[l-1]].lstrip())
    randRecap.configure(state="disabled")
    
def addPlayerRand():
    group=randStatPlayer.get()
    if group=="Pick a character/group":
        recapList.configure(state="normal")
        recapList.insert(tk.END, "Pick a character/group\n")
        recapList.configure(state="disabled")
        return
    index=comboList.index(group)
    size=getGroupSize(index)
    if size!=1:
        index=index+1
    for i in range(index,index+size):
        if not i in randPlayerList:
            randPlayerList.append(i)
            randPlayerList.sort()
    refreshRandText()
    
def removePlayerRand():
    group=randStatPlayer.get()
    if group=="Pick a character/group":
        recapList.configure(state="normal")
        recapList.insert(tk.END, "Pick a character/group\n")
        recapList.configure(state="disabled")
        return
    index=comboList.index(group)
    size=getGroupSize(index)
    if size!=1:
        index=index+1
    for i in range(index,index+size):
        if i in randPlayerList:
            randPlayerList.remove(i)
    refreshRandText()

def pitchUpdate():
    if randPitchBar.getvar(randPitchBar.cget("variable"))=="1":
        randDisplayPitch.configure(state="disabled")
        randDisplayPitch.deselect()
    else:
        randDisplayPitch.configure(state="normal")

def variationMode():
    for i in ["10","11","12","13","14","15","16","17","22","23","24","28"]:
        if randVariationVar.get()==1:
            if eval("randCheckStat"+i).getvar(eval("randCheckStat"+i).cget("variable"))=="1":
                eval("randStat"+i+"range").configure(state="normal")   
        else:
            eval("randStat"+i+"range").configure(state="disabled")
        
        
def linkPitch():
    if randLinkPitchVar.get():
        randLinkPitchSb.configure(state="normal")
    else:
        randLinkPitchSb.configure(state="disabled")

def linkContact():
    if randLinkContactVar.get():
        randLinkContactSb.configure(state="normal")
    else:
        randLinkContactSb.configure(state="disabled")

def linkPower():
    if randLinkPowerVar.get():
        randLinkPowerSb.configure(state="normal")
    else:
        randLinkPowerSb.configure(state="disabled")
        
def randomizeStats():
    recapList.configure(state="normal")
    playerList=randPlayerList.copy()
    if randStatEveryPlayerVar.get():
        playerList=list(range(124))
        for i in [10,18,27,30,33,39,46,53,57,64,75,82,85,88,91,94,97,100,103,106,109,112,115]:
            playerList.remove(i)      
    nPlayers=len(playerList)
    if nPlayers==0:
        recapList.insert(tk.END,"No characters to randomize\n")
        recapList.configure(state="disabled")
        return
    if randPitchBarVar.get():
        changePitch = 2
    else :
        changePitch = randDisplayPitchVar.get()
    changeBars = randDisplayStatsVar.get()
    doubleAbilities = randStatDoubleAbilityVar.get()
    d=-1
    distribution = randDistribution.get()
    anti=min(1,max(-1,distribution))
    distribution=distribution*anti
    anti=anti*-1
    variation = randVariationVar.get()
    pitchLink = randLinkPitchVar.get()*(int(randLinkPitchSb.get())+1)-1
    contactLink = randLinkContactVar.get()*(int(randLinkContactSb.get())+1)-1
    powerLink = randLinkPowerVar.get()*(int(randLinkPowerSb.get())+1)-1
    for i in ["10","11","12","13","14","15","16","17","22","23","24","28"]:
        var="randStat"+i
        low=eval(var+"min").get()
        high=eval(var+"max").get()
        if low.isdecimal()==False or high.isdecimal()==False:
            recapList.insert(tk.END, "Unexpected non-numerical value(s)\n")
            recapList.configure(state="disabled")
            return
        if int(low)>int(high):
            recapList.insert(tk.END, "Minimum or range higher than maximum\n")
            recapList.configure(state="disabled")
            return
    if randLinkPitchSb.get().isdecimal()==False or randLinkContactSb.get().isdecimal()==False or randLinkPowerSb.get().isdecimal()==False:
        recapList.insert(tk.END, "Unexpected non-numerical value(s)\n")
        recapList.configure(state="disabled")
        return
    message=""
    for j in playerList:
        player=charList.index(comboList[j].lstrip())
        if doubleAbilities==0 and randCheckStat8.getvar(randCheckStat8.cget("variable"))=="1" and randCheckStat9.getvar(randCheckStat9.cget("variable"))=="1":
            d=randint(0,1)
        for i in ["0","1","2","4","8","9","10","11","12","13","14","15","16","17","22","23","24","26","27","28"]:
            if eval("randCheckStat"+i).getvar(eval("randCheckStat"+i).cget("variable"))=="1":
                if i=="0" or i=="1" or i=="27":
                    r=randint(0,1)
                elif i=="2":
                    r=randint(0,3)
                elif i=="4":
                    r=randint(0,4)
                elif i=="8":
                    r=randint(1,12)*d*d
                elif i =="9":
                    r=randint(1,7)*min(1,(1-d))
                elif i == "26":
                    r=randint(0,len(trajList)-1)
                else:
                    var="randStat"+i
                    mini=int(eval(var+"min").get())
                    maxi=int(eval(var+"max").get())
                    rnge=int(eval(var+"range").get())
                    lowmini=int(eval(var+"min").cget("from"))
                    highmini=int(eval(var+"min").cget("to"))
                    lowmaxi=int(eval(var+"max").cget("from"))
                    highmaxi=int(eval(var+"max").cget("to"))
                    lowrnge=int(eval(var+"range").cget("from"))
                    highrnge=int(eval(var+"range").cget("to"))
                    if mini<lowmini:
                        mini=lowmini
                        eval(var+"min").set(str(lowmini))
                    elif mini>highmini:
                        mini=highmini
                        eval(var+"min").set(str(highmini))
                    if maxi<lowmaxi:
                        maxi=lowmaxi
                        eval(var+"max").set(str(lowmaxi))
                    elif maxi>highmaxi:
                        maxi=highmaxi
                        eval(var+"max").set(str(highmaxi))
                    if rnge<lowrnge:
                        rnge=lowrnge
                        eval(var+"range").set(str(lowrnge))
                    elif rnge>highrnge:
                        rnge=highrnge
                        eval(var+"range").set(str(highrnge))
                    if variation:
                        stat=changedStat[player][int(i)]
                        r1=max(min(stat+binomialvariate(rnge*2,0.5)-rnge,maxi),mini)
                        r2=max(min(randint(stat-rnge,stat+rnge),maxi),mini)
                    else:
                        r1=binomialvariate(maxi-mini,0.5)+mini
                        r2=randint(mini,maxi)
                    if randint(1,10)>distribution:
                        r=r2
                    else:
                        r=r1
                    if i=="23" and pitchLink>=0:
                        c1=changedStat[player][22]
                        c2=int(c1*(1+pitchLink*0.01))
                        if pitchLink==0:
                            r=max(r,c1)
                        else:
                            if c2>maxi:
                                r=maxi
                                changedStat[player][22]=int(maxi/(1+pitchLink*0.01))
                            else:
                                r=c2
                    if i=="11" and contactLink>=0:
                        c1=changedStat[player][10]
                        c2=int(c1/(1+pitchLink*0.01))
                        if contactLink==0:
                            r=min(r,c1)
                        else:
                            if c2<mini:
                                r=mini
                                changedStat[player][10]=int(mini*(1+contactLink*0.01))
                            else:
                                r=c2
                    if i=="13" and powerLink>=0:
                        c1=changedStat[player][12]
                        c2=int(c1*1+powerLink*0.01)
                        if powerLink==0:
                            r=max(r,c1)
                        else:
                            if c2>maxi:
                                r=maxi
                                changedStat[player][12]=int(maxi/(1+powerLink*0.01))
                            else:
                                r=c2
                changedStat[player][int(i)]=r
                if j==playerList[0]:
                    message=message+" "+statsList[int(i)]+","
        if randStatEveryPlayerVar.get():
            if j==playerList[0]:
                if message!="":
                    message=message.rstrip(",")
                    if message.find(",")!=-1:
                        message1=message.rsplit(", ",1)
                        message="Randomized"+message1[0]+" and "+message1[1]+" for everyone\n"
                    else:
                        message="Randomized"+message+" for everyone\n"
                else:
                    recapList.insert(tk.END, "No stat selected to randomize\n")
                    recapList.configure(state="disabled")
                    return
        else:
            if j==playerList[0]:
                if message!="":
                    message=message.rstrip(",")
                    if message.find(",")!=-1:
                        message1=message.rsplit(", ",1)
                        message="Randomized"+message1[0]+" and "+message1[1]+" for :\n"+comboList[j].lstrip()
                    else:
                        message="Randomized"+message+" for :\n"+comboList[j].lstrip()
                else:
                    recapList.insert(tk.END, "No stat selected to randomize\n")
                    recapList.configure(state="disabled")
                    return
            elif j==playerList[-1]:
                message = message+" and "+comboList[j].lstrip()
            else:
                message = message+", "+comboList[j].lstrip()
        if changePitch==2:
            changedStat[player][18]=randint(1,9)
        if changePitch==1:
            pitchBar = 0
            pitchBarMiss = 0
            if randStat22max.get()!=randStat22min.get():
                pitchBar = 0.25*(changedStat[player][22]-int(randStat22min.get()))/(int(randStat22max.get())-int(randStat22min.get()))
            else : 
                pitchBarMiss = 0.25
            if randStat23max.get()!=randStat23min.get():
                pitchBar = pitchBar + 0.25*(changedStat[player][23]-int(randStat23min.get()))/(int(randStat23max.get())-int(randStat23min.get()))
            else :
                pitchBarMiss = pitchBarMiss + 0.25
            if randStat24max.get()!=randStat24min.get():
                pitchBar = pitchBar + 0.5*(changedStat[player][24]-int(randStat24min.get()))/(int(randStat24max.get())-int(randStat24min.get()))
            else : 
                pitchBarMiss = pitchBarMiss + 0.5
            if pitchBarMiss == 1:
                pitchBar = 0.5
            else : 
                pitchBar = pitchBar/(1-pitchBarMiss)
            pitchBar = min(max(round(pitchBar*10),1),9)
            if randCheckStat22.getvar(randCheckStat22.cget("variable"))=="1" or randCheckStat23.getvar(randCheckStat23.cget("variable"))=="1" or randCheckStat24.getvar(randCheckStat24.cget("variable"))=="1":
                changedStat[player][18]=pitchBar
        if changeBars==1:
            batBar = 0
            batBarMiss = 0
            if randStat10max.get()!=randStat10min.get():
                batBar = 0.125*(changedStat[player][10]-int(randStat10min.get()))/(int(randStat10max.get())-int(randStat10min.get()))
            else : 
                batBarMiss = 0.125
            if randStat11max.get()!=randStat11min.get():
                batBar = batBar + 0.125*(changedStat[player][11]-int(randStat11min.get()))/(int(randStat11max.get())-int(randStat11min.get()))
            else :
                batBarMiss = batBarMiss + 0.125
            if randStat12max.get()!=randStat12min.get():
                batBar = batBar + 0.375*(changedStat[player][12]-int(randStat12min.get()))/(int(randStat12max.get())-int(randStat12min.get()))
            else : 
                batBarMiss = batBarMiss + 0.375
            if randStat13max.get()!=randStat13min.get():
                batBar = batBar + 0.375*(changedStat[player][13]-int(randStat13min.get()))/(int(randStat13max.get())-int(randStat13min.get()))
            else : 
                batBarMiss = batBarMiss + 0.375
            if batBarMiss == 1:
                batBar = 0.5
            else : 
                batBar = batBar/(1-batBarMiss)
            batBar = min(max(round(batBar*10),1),9)
            if randStat17max.get()!=randStat17min.get():
                fieldBar = (changedStat[player][17]-int(randStat17min.get()))/(int(randStat17max.get())-int(randStat17min.get()))
            else :
                fieldBar = 0.5
            fieldBar = min(max(round(fieldBar*10),1),9)
            if randStat15max.get()!=randStat15min.get():
                speedBar = (changedStat[player][15]-int(randStat15min.get()))/(int(randStat15max.get())-int(randStat15min.get()))
            else :
                speedBar = 0.5
            speedBar = min(max(round(speedBar*10),1),9)
            if randCheckStat10.getvar(randCheckStat10.cget("variable"))=="1" or randCheckStat11.getvar(randCheckStat11.cget("variable"))=="1" or randCheckStat12.getvar(randCheckStat12.cget("variable"))=="1" or randCheckStat13.getvar(randCheckStat13.cget("variable"))=="1":
                changedStat[player][19]=batBar
            if randCheckStat17.getvar(randCheckStat17.cget("variable"))=="1":
                changedStat[player][20]=fieldBar
            if randCheckStat15.getvar(randCheckStat15.cget("variable"))=="1":
                changedStat[player][21]=speedBar
       
        '''
        pitch = 1/4 curevball + 1/4 charge + 1/2 curve
        bat = 3/8 slap power + 3/8 charge power + 1/8 slap contact + 1/8 charge contact
        field = round field
        running = round speed
        '''
    recapList.insert(tk.END,message+"\n")
    recapList.configure(state="disabled")
    
#Traj functions

def trajDisplay(clear):
    if clear:
        trajGroup.set("Pick a trajectory :")
        trajGroupActiveVar.set(1)
        trajGroupActive.configure(state="disabled")
        trajValidateValues.configure(state="disabled")
        trajResetTraj.configure(state="disabled")
    else:
        group=trajGroup.get()
        index=trajAllList.index(group)
        if index<3:
            trajGroupActiveVar.set(1)
            trajGroupActive.configure(state="disabled")
        else:
            trajGroupActive.configure(state="normal")
            trajGroupActiveVar.set(trajUsed[index])
        trajValidateValues.configure(state="normal")
        trajResetTraj.configure(state="normal")
    for i in range(4):
        for j in range(5):
            for k in range(5):
                if clear:
                    trajSpinboxes[i][j][k].set("")
                    trajSpinboxes[i][j][k].configure(state="disabled")
                else:
                    trajSpinboxes[i][j][k].configure(state="normal")
                    trajSpinboxes[i][j][k].set(changedTraj[index*4+i][j*5+k])

def trajChanged(event):
    trajDisplay(0)

def changedTrajListUsed():
    global trajList
    trajList=[]
    for i in range(6):
        if trajUsed[i]:
            trajList.append(trajAllList[i])
    sbStat26.config(values=trajList)
    statDisplay(1)
    
def activateGroup():
    group=trajGroup.get()
    if group=="Pick a trajectory":
        recapList.configure(state="normal")
        recapList.insert(tk.END,"No trajectory picked\n")
        recapList.configure(state="disabled")
        return
    index=trajAllList.index(group)
    trajUsed[index]=trajGroupActiveVar.get()
    changedTrajListUsed()
    message="Warning :"
    if trajGroupActiveVar.get()==0:
        for i in range(101):
            if changedStat[i][26]==index:
                message=message+" "+charList[i]+","
    if message!="Warning :":
        message=message.rstrip(",")
        if message.find(",")!=-1:
            message1=message.rsplit(", ",1)
            message=message1[0]+" and "+message1[1]
        recapList.configure(state="normal")
        recapList.insert(tk.END,message+" used "+group+" trajectory\n")
        recapList.configure(state="disabled")
    
def changeTrajName():
    recapList.configure(state="normal")
    group=trajGroup.get()
    if group=="Pick a trajectory":
        recapList.insert(tk.END,"No trajectory picked\n")
        recapList.configure(state="disabled")
        return
    index=trajAllList.index(group)
    name=trajChangeName.get()
    if not re.search("^[a-zA-Z\s0-9]+$", name):
        recapList.insert(tk.END,"Name can only contain letters, numbers and spaces\n")
        recapList.configure(state="disabled")
        return
    if name in trajAllList:
        recapList.insert(tk.END,"There is already a trajectory with that name\n")
        recapList.configure(state="disabled")
        return
    trajAllList[index]=name
    trajGroup.config(values=trajAllList)
    trajGroup.set(name)
    recapList.insert(tk.END,group+" changed to "+name+"\n")
    recapList.configure(state="disabled")

def changeTraj():
    recapList.configure(state="normal")
    group=trajGroup.get()
    if group=="Pick a trajectory":
        recapList.insert(tk.END,"No trajectory picked\n")
        recapList.configure(state="disabled")
        return
    index=trajAllList.index(group)
    for i in range(4):
        for j in range(5):
            n=0
            for k in range(5):
                n0=n
                n=n+int(trajSpinboxes[i][j][k].get())
                if n>100:
                    trajSpinboxes[i][j][k].set(100-n0)
                    n=100
            if n<100:
                trajSpinboxes[i][j][4].set(100-n0)
            for k in range(5):
                changedTraj[index*4+i][j*5+k]=int(trajSpinboxes[i][j][k].get())
    recapList.insert(tk.END,group+" trajectory heights changed\n")
    recapList.configure(state="disabled")

def resetTraj():
    recapList.configure(state="normal")
    group=trajGroup.get()
    if group=="Pick a trajectory":
        recapList.insert(tk.END,"No trajectory picked\n")
        recapList.configure(state="disabled")
        return
    index=trajAllList.index(group)
    for i in range(4):
        changedTraj[index*4+i]=defaultTraj[index*4+i].copy()
    trajDisplay(0)
    recapList.insert(tk.END,group+" trajectory heights reset\n")
    recapList.configure(state="disabled")
    
#Gecko code and saving functions

def getCaptain(i):
    if i in [0,1,2,3,4,5,6,9,10,11,17,19]:
        return 1
    else:
        return 0

def getTeam(i):
    if i<6:
        return i+1
    if i==6:
        return 9
    if i==9:
        return 11
    if i==10 or i==11:
        return i-3
    if i==17 or i==19:
        return i-7
    return 0

def getStatOffset(j):
    if j<11:
        return j+3
    if j<19:
        return 2*j-7
    if j<23:
        return j+11
    else:
        return 2*j-11
    
def simpleAdvance(stat,default,L):
    is4=L[0]
    is6=L[1]
    count40=L[2]
    count68=L[3]
    count60=L[4]
    stock41=L[5]
    stock42=L[6]
    code=L[7]
    code6=L[8]
    startAddress=L[9]
    stock41=stock41+hex(stat).lstrip("0x").zfill(2)
    if stat!=default:
        is4=1
    count40=(count40+1)%4
    L.clear()
    L=[is4,is6,count40,count68,count60,stock41,stock42,code,code6,startAddress]  
    return L.copy()
    
def advanceCount(stat,default,address,L):
    L=simpleAdvance(stat,default,L.copy())
    is4=L[0]
    is6=L[1]
    count40=L[2]
    count68=L[3]
    count60=L[4]
    stock41=L[5]
    stock42=L[6]
    code=L[7]
    code6=L[8]
    startAddress=L[9]
    
    if count40==0:
        if stock42=="":
            if is4==1:
                stock42=stock41
                if is6==0:
                    startAddress=hex(address-3).lstrip("0x")
            elif is6==1:
                stock42=stock41
                count60=1
        else:
            if is4==1:
                code6=code6+stock42+" "+stock41+"\n"
                count68=count68+8
                is6=1
                count60=0
            else:
                if is6==0:
                    code=code+"04"+startAddress+" "+stock42+"\n"
                else:
                    if count60==1:
                        code=code+"06"+startAddress+" "+hex(count68).lstrip("0x").zfill(8)+"\n"+code6
                        is6=0
                        count68=0
                        code6=""
                    else:
                        code6=code6+stock42+" "+stock41+"\n"
                        count68=count68+8
            stock42=""
        stock41=""
        is4=0
    L.clear()
    L=[is4,is6,count40,count68,count60,stock41,stock42,code,code6,startAddress]
    return L.copy()

def resetCount(address,L):
    is4=L[0]
    is6=L[1]
    count68=L[3]
    stock41=L[5]
    stock42=L[6]
    code=L[7]
    code6=L[8]
    startAddress=L[9]
    
    if is6==0:
        if stock42!="":
            code=code+"04"+startAddress+" "+stock42+"\n"
        if is4==1:
            startAddress=hex(address).lstrip("0x")
            if address!=7152044:
                code=code+"04"+startAddress+" "+stock41.zfill(8)+"\n"
            else:
                code=code+"00"+startAddress+" "+stock41[:2].zfill(8)+"\n"
    else:
        if stock42=="":
            code=code+"06"+startAddress+" "+hex(count68).lstrip("0x").zfill(8)+"\n"+code6
            if is4==1:
                startAddress=hex(address).lstrip("0x")
                if address!=7152044:
                    code=code+"04"+startAddress+" "+stock41.zfill(8)+"\n"
                else:
                    code=code+"00"+startAddress+" "+stock41[:2].zfill(8)+"\n"
        else:
            code6=code6+stock42+" "+stock41.zfill(8)+"\n"
            count68=count68+8
            code=code+"06"+startAddress+" "+hex(count68).lstrip("0x").zfill(8)+"\n"+code6
    
    L.clear()
    L=[0,0,0,0,0,"","",code,"",""]
    return L.copy()

def geckoGenerate(listPlayers,exclude):
    baseAddress=7137703
    baseTraj=6463836
    baseStamina=6457636
    baseStarPitchType=6457532
    baseTrajHeight=6450824
    lastplayer=listPlayers[0]
    is4=0
    is6=0
    count40=0
    count68=0
    count60=0
    stock41=""
    stock42=""
    code=""
    code6=""
    startAddress=""
    Lv=[is4,is6,count40,count68,count60,stock41,stock42,code,code6,startAddress]
    for i in listPlayers: #stats and chem
        if i==lastplayer+1:
            Lv = advanceCount(0, 0, baseAddress+142*i, Lv.copy())
            Lv = advanceCount(0, 0, baseAddress+142*i+1, Lv.copy())
            Lv = advanceCount(i, i, baseAddress+142*i+2, Lv.copy())
        else:
            if i!=lastplayer:
                Lv=simpleAdvance(0, 0, Lv.copy())
                if lastplayer%2==0:
                    Lv=simpleAdvance(0, 0, Lv.copy())
                    Lv=simpleAdvance(lastplayer+1, lastplayer+1, Lv.copy())
                Lv = resetCount(baseAddress+142*lastplayer+141-(lastplayer%2)*2,Lv.copy())
            if i%2==0:
                Lv=simpleAdvance(0, 0, Lv.copy())
                Lv=simpleAdvance(i, i, Lv.copy())
        for j in range(26): #stats
            if j in [10,11,12,13,14,15,16,17,22,23,24,25]:
                stat=changedStat[i][j]
                default=defaultStat[i][j]
                stat0=stat//256
                default0=default//256
                stat1=stat%256
                default1=default%256
                Lv = advanceCount(stat0, default0, baseAddress+142*i+getStatOffset(j), Lv.copy())
                Lv = advanceCount(stat1, default1, baseAddress+142*i+getStatOffset(j)+1, Lv.copy())
            else:
                stat=changedStat[i][j]
                default=defaultStat[i][j]
                Lv = advanceCount(stat, default, baseAddress+142*i+getStatOffset(j), Lv.copy())
        for j in range(101): #chem
            stat=changedChem[i][j]
            default=defaultChem[i][j]
            Lv = advanceCount(stat, default, baseAddress+142*i+j+41, Lv.copy())
        lastplayer=i
    Lv=simpleAdvance(0, 0, Lv.copy())
    if lastplayer%2==0:
        simpleAdvance(0, 0, Lv.copy())
        simpleAdvance(lastplayer+1, lastplayer+1, Lv.copy())
    Lv = resetCount(baseAddress+142*lastplayer+141-(lastplayer%2)*2,Lv.copy())
    
    for i in range(101): #traj
        stat0=changedStat[i][26]
        stat1=changedStat[i][27]
        default0=defaultStat[i][26]
        default1=defaultStat[i][27]
        if i in listPlayers:
            Lv = advanceCount(stat0, default0, baseTraj+2*i, Lv.copy())
            Lv = advanceCount(stat1, default1, baseTraj+2*i+1, Lv.copy())
        else:
            if exclude:
                Lv = advanceCount(default0, default0, baseTraj+2*i, Lv.copy())
                Lv = advanceCount(default1, default1, baseTraj+2*i+1, Lv.copy())
            else:
                Lv = advanceCount(stat0, stat0, baseTraj+2*i, Lv.copy())
                Lv = advanceCount(stat1, stat1, baseTraj+2*i+1, Lv.copy())
    Lv=simpleAdvance(0, 0, Lv.copy())
    Lv=simpleAdvance(0, 0, Lv.copy())
    Lv = resetCount(6464036,Lv.copy())
    
    for i in range(101): #stamina
        stat=changedStat[i][28]
        default=defaultStat[i][28]
        stat0=stat//256
        default0=default//256
        stat1=stat%256
        default1=default%256
        if i in listPlayers:
            Lv = advanceCount(stat0, default0, baseStamina+2*i, Lv.copy())
            Lv = advanceCount(stat1, default1, baseStamina+2*i+1, Lv.copy())
        else:
            if exclude:
                Lv = advanceCount(default0, default0, baseStamina+2*i, Lv.copy())
                Lv = advanceCount(default1, default1, baseStamina+2*i+1, Lv.copy())
            else:
                Lv = advanceCount(stat0, stat0, baseStamina+2*i, Lv.copy())
                Lv = advanceCount(stat1, stat1, baseStamina+2*i+1, Lv.copy())
    Lv=simpleAdvance(0, 0, Lv.copy())
    Lv=simpleAdvance(0, 0, Lv.copy())
    Lv = resetCount(6457836,Lv.copy())
    
    for i in range(101): #pitch type
        stat=changedStat[i][29]
        default=defaultStat[i][29]
        if i in listPlayers:
            Lv = advanceCount(stat0, default0, baseStarPitchType+i, Lv.copy())
        else:
            if exclude:
                Lv = advanceCount(default0, default0, baseStarPitchType+i, Lv.copy())
            else:
                Lv = advanceCount(stat0, stat0, baseStarPitchType+i, Lv.copy())
    Lv=simpleAdvance(0, 0, Lv.copy())
    Lv=simpleAdvance(0, 0, Lv.copy())
    Lv=simpleAdvance(0, 0, Lv.copy())
    Lv = resetCount(6457632,Lv.copy())
    
    for i in range(24): #traj heights
        for j in range(25):
            Lv = advanceCount(changedTraj[i][j], defaultTraj[i][j], baseTrajHeight+i*25+j, Lv.copy())
    Lv = resetCount(6451420,Lv.copy())
    
    return Lv[7].rstrip("\n")

def geckoAll():
    l=[]
    for i in range(101):
        l.append(i)
    code=geckoGenerate(l,0)
    geckoDisplay.configure(state="normal")
    geckoDisplay.delete("0.0",tk.END)
    geckoDisplay.insert(tk.END,code)
    geckoDisplay.configure(state="disabled")
    recapList.configure(state="normal")
    recapList.insert(tk.END,"Complete code generated \n")
    recapList.configure(state="disabled")
    n=code.count("\n")
    if n>380:
        geckoWarning.configure(text="Warning : gecko code too big, consider saving and selecting only the playing teams",fg="red")
    else :
        geckoWarning.configure(text="")

def geckoPart():
    recapList.configure(state="normal")
    if len(geckoPlayerList)==0:
        recapList.insert(tk.END,"No characters selected\n")
        recapList.configure(state="disabled")
        return
    l=[]
    for i in geckoPlayerList:
        l.append(charList.index((comboList[i].lstrip())))
    code=geckoGenerate(l,0)
    geckoDisplay.configure(state="normal")
    geckoDisplay.delete("0.0",tk.END)
    geckoDisplay.insert(tk.END,code)
    geckoDisplay.configure(state="disabled")
    recapList.insert(tk.END,"Code generated for : ")
    for i in geckoPlayerList[:-2]:
        recapList.insert(tk.END, comboList[i].lstrip()+", ")
    if len(geckoPlayerList)>1:
        recapList.insert(tk.END, comboList[geckoPlayerList[-2]].lstrip()+" and ") 
    recapList.insert(tk.END, comboList[geckoPlayerList[-1]].lstrip()+"\n")
    recapList.configure(state="disabled")
    n=code.count("\n")
    if n>380:
        geckoWarning.configure(text="Warning : gecko code too big, consider saving and selecting only the playing teams",fg="red")
    else :
        geckoWarning.configure(text="")
        
def geckoPartExclude():
    recapList.configure(state="normal")
    if len(geckoPlayerList)==0:
        recapList.insert(tk.END,"No characters selected\n")
        recapList.configure(state="disabled")
        return
    l=[]
    for i in geckoPlayerList:
        l.append(charList.index((comboList[i].lstrip())))
    code=geckoGenerate(l,1)
    geckoDisplay.configure(state="normal")
    geckoDisplay.delete("0.0",tk.END)
    geckoDisplay.insert(tk.END,code)
    geckoDisplay.configure(state="disabled")
    recapList.insert(tk.END,"Code generated for : ")
    for i in geckoPlayerList[:-2]:
        recapList.insert(tk.END, comboList[i].lstrip()+", ")
    if len(geckoPlayerList)>1:
        recapList.insert(tk.END, comboList[geckoPlayerList[-2]].lstrip()+" and ") 
    recapList.insert(tk.END, comboList[geckoPlayerList[-1]].lstrip()+"\n")
    recapList.configure(state="disabled")
    n=code.count("\n")
    if n>380:
        geckoWarning.configure(text="Warning : gecko code too big, consider saving and selecting only the playing teams",fg="red")
    else :
        geckoWarning.configure(text="")
        
def geckoCopy():
    root.clipboard_clear()
    root.clipboard_append(geckoDisplay.get("1.0", tk.END).strip())
    root.update()

def loadChanges():
    recapList.configure(state="normal")
    name=geckoFile.get()
    if not name.isalnum():
        if name=="":
            recapList.insert(tk.END,"No file name\n")
            recapList.configure(state="disabled")
            return
        recapList.insert(tk.END,"File name can't contain spaces or special characters\n")
        recapList.configure(state="disabled")
        return
    try:
        with open(name+".txt","r") as file:
            chem=""
            stat=""
            traj=""
            for i in range(100):
                chem=chem+file.readline().rstrip("\n")+";"
            chem=chem+file.readline()
            for i in range(100):
                stat=stat+file.readline().rstrip("\n")+";"
            stat=stat+file.readline()
            for i in range(23):
                traj=traj+file.readline().rstrip("\n")+";"
            traj=traj+file.readline().rstrip("\n")
            name=file.readline().rstrip("\n")
            used=file.readline().rstrip("\n")
            error=0
            if not re.search("^(([012],){100}[012];){100}([012],){100}[012]$",chem):
                recapList.insert(tk.END,"corrupted chem data\n")
                error=1
            if not re.search("^(([0-9]+,){29}[0-9]+;){100}([0-9]+,){29}[0-9]+$",stat):
                recapList.insert(tk.END,"corrupted stat data\n")
                error=1
            if not re.search("^(([0-9]+,){24}[0-9]+;){23}([0-9]+,){24}[0-9]+$",traj):
                recapList.insert(tk.END,"corrupted traj data\n")
                error=1
            if not re.search("^([a-zA-Z0-9\s]+,){5}[a-zA-Z0-9\s]+$",name):
                recapList.insert(tk.END,"corrupted traj data\n")
                error=1
            if not re.search("^([01],){5}[01]$",used):
                recapList.insert(tk.END,"corrupted traj data\n")
                error=1
            if error==1:
                recapList.configure(state="disabled")
                return
            chems=chem.split(";")
            stats=stat.split(";")
            trajs=traj.split(";")
            names=name.split(",")
            useds=used.split(",")
            for i in range(101):
                c=chems[i].split(",")
                s=stats[i].split(",")
                for j in range(101):
                    changedChem[i][j]=int(c[j])
                for j in range(30):
                    changedStat[i][j]=int(s[j])
                if i<24:
                    t=trajs[i].split(",")
                    for j in range(25):
                        changedTraj[i][j]=int(t[j])
                if i<6:
                    trajAllList[i]=names[i]
                    trajUsed[i]=int(useds[i])
            changedTrajListUsed()
            trajDisplay(1)
            chemColor()
            recapList.insert(tk.END,"Data loaded\n")
            recapList.configure(state="disabled")
    except FileNotFoundError:
        recapList.insert(tk.END,"File not found\n")
        recapList.configure(state="disabled")
        return

def saveChanges():
    recapList.configure(state="normal")
    name=geckoFile.get()
    if not name.isalnum():
        if name=="":
            recapList.insert(tk.END,"No file name\n")
            recapList.configure(state="disabled")
            return
        recapList.insert(tk.END,"File name can't contain spaces or special characters\n")
        recapList.configure(state="disabled")
        return
    if geckoSecurityVar.get()==1:
        mode="w"
    else:
        mode="x"
    try:
        with open(name+".txt",mode) as file:
            for i in range(101):
                for j in range(100):
                    file.write(str(changedChem[i][j])+",")
                file.write(str(changedChem[i][100])+"\n")
            for i in range(101):
                for j in range(29):
                    file.write(str(changedStat[i][j])+",")
                file.write(str(changedStat[i][29])+"\n")
            for i in range(24):
                for j in range(24):
                    file.write(str(changedTraj[i][j])+",")
                file.write(str(changedTraj[i][24])+"\n")
            for i in range(5):
                file.write(trajAllList[i]+",")
            file.write(trajAllList[5]+"\n")
            for i in range(5):
                file.write(str(trajUsed[i])+",")
            file.write(str(trajUsed[5]))
            recapList.insert(tk.END,"Data saved\n")
            recapList.configure(state="disabled")
    except FileExistsError:
        recapList.insert(tk.END,"File already exists\n")
        recapList.configure(state="disabled")
        return

def refreshGeckoText():
    geckoPlayers.configure(state="normal")
    geckoPlayers.delete("0.0",tk.END)
    l=len(geckoPlayerList)
    if l==0:
        geckoPlayers.insert(tk.END,"No character selected")
    else:
        for i in geckoPlayerList[:-1]:
            geckoPlayers.insert(tk.END, comboList[i].lstrip()+", ")
        geckoPlayers.insert(tk.END, comboList[geckoPlayerList[l-1]].lstrip())
    geckoPlayers.configure(state="disabled")

def addPlayerGecko():
    group=geckoPlayerSelection.get()
    if group=="Pick a character/group":
        recapList.configure(state="normal")
        recapList.insert(tk.END, "Pick a character/group\n")
        recapList.configure(state="disabled")
        return
    index=comboList.index(group)
    size=getGroupSize(index)
    if size!=1:
        index=index+1
    for i in range(index,index+size):
        if not i in geckoPlayerList:
            geckoPlayerList.append(i)
            geckoPlayerList.sort()
    refreshGeckoText()

def removePlayerGecko():
    group=geckoPlayerSelection.get()
    if group=="Pick a character/group":
        recapList.configure(state="normal")
        recapList.insert(tk.END, "Pick a character/group\n")
        recapList.configure(state="disabled")
        return
    index=comboList.index(group)
    size=getGroupSize(index)
    if size!=1:
        index=index+1
    for i in range(index,index+size):
        if i in geckoPlayerList:
            geckoPlayerList.remove(i)
    refreshGeckoText()

def clearPlayersGecko():
    geckoPlayerList.clear()
    refreshGeckoText()

#Wacky functions

def fixWalu():
    changedStat[11][11]=1
    
def reverseStats():
    L=[0,0,3,0,4,0,0,0,0,0,125,90,75,110,100,100,110,105,10,10,10,10,220,255,95,0,0,0,120]
    for j in [2,4,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,28]:
        for i in range(101):
            s=changedStat[i][j]
            if j==26:
                t=(3-s)%3
                changedStat[i][j]=t
            else:
                changedStat[i][j]=L[j]-s
    fixWalu()
    statDisplay(0)
    recapList.configure(state="normal")
    recapList.insert(tk.END, "Current stats reversed !\n")
    recapList.configure(state="disabled")

def reverseChem():
    for i in range(101):
        for j in range(101):
            changedChem[i][j]=(2-changedChem[i][j])%3
    chemColor()
    recapList.configure(state="normal")
    recapList.insert(tk.END, "Current chem reversed !\n")
    recapList.configure(state="disabled")
    
def reverseHand():
    for i in range(101):
        changedStat[i][0]=1-changedStat[i][0]
        changedStat[i][1]=1-changedStat[i][1]
    statDisplay(0)
    recapList.configure(state="normal")
    recapList.insert(tk.END, "Current handedness reversed !\n")
    recapList.configure(state="disabled")
    
def devMode():
    if wackyDevModeVar.get():
        for i in [10,11,12,13,14,15,16,17,22,23,24,25,28]:
            eval("sbStat"+str(i)).config(from_=0,to=65535)
        recapList.configure(state="normal")
        recapList.insert(tk.END, "Dev mode activated, at your own risks !\n")
        recapList.configure(state="disabled")
    else:
        for i in [10,11]:
            eval("sbStat"+str(i)).config(from_=10,to=200)
        for i in [12,13]:
            eval("sbStat"+str(i)).config(to=150)
        for i in [14,15,16,17,24]:
            eval("sbStat"+str(i)).config(to=200)
        for i in [22,23]:
            eval("sbStat"+str(i)).config(from_=70,to=200)
        for i in [25,28]:
            eval("sbStat"+str(i)).config(to=100)
        recapList.configure(state="normal")
        recapList.insert(tk.END, "Dev mode de-activated, edited stats may remain out of safe range\n")
        recapList.configure(state="disabled")


#main loop
root = tk.Tk()
root.geometry("1200x720")

#recap setup

recapFrame = tk.LabelFrame(root, text="Changes Made")
recapFrame.pack(side=tk.LEFT,anchor=tk.N,padx=5)

recapScrollbar = tk.Scrollbar(recapFrame)
recapScrollbar.pack(side=tk.RIGHT, fill=tk.Y)
recapList = tk.Text(recapFrame, height = 42, width = 50,
                    state="disabled", wrap="word", yscrollcommand=recapScrollbar.set)
recapList.pack()
recapScrollbar.config(command = recapList.yview) 

#tabs setup

statsTabs = ttk.Notebook(root)
statsTabs.pack(side=tk.LEFT,anchor=tk.N,padx=5)

chemistryFrame = tk.LabelFrame(statsTabs, text="Chemistry Editor")
chemistryFrame.pack()
statsTabs.add(chemistryFrame, text="Chemistry")
manualStatsFrame = tk.Frame(statsTabs)
manualStatsFrame.pack()
statsTabs.add(manualStatsFrame, text="Stats Editor")
randomStatsFrame = tk.Frame(statsTabs)
randomStatsFrame.pack()
statsTabs.add(randomStatsFrame, text="Stats Randomizer")
trajFrame = tk.LabelFrame(statsTabs)
trajFrame.pack()
statsTabs.add(trajFrame, text="Traj Heights Editor")
geckoFrame = tk.Frame(statsTabs)
geckoFrame.pack()
statsTabs.add(geckoFrame, text="Gecko Code")
wackyFrame = tk.Frame(statsTabs)
wackyFrame.pack()
statsTabs.add(wackyFrame, text="Wacky Stuff")
creditsFrame = tk.Frame(statsTabs)
creditsFrame.pack()
statsTabs.add(creditsFrame, text="Credits")

#Chemistry setup

destinationFrame = tk.Frame(chemistryFrame)
destinationFrame.grid(row=0,column=0)
dirlabel = tk.Label(destinationFrame, text = "Choose direction")
dirlabel.pack()
directionVar = tk.IntVar()
directionVar.set(0)
direction1Button = tk.Radiobutton(destinationFrame, text = "One-Sided",
                                  variable=directionVar, value=1, command=dirChange)
direction1Button.pack(padx=5, pady=0)
direction2Button = tk.Radiobutton(destinationFrame, text = "Both Sides",
                                  variable=directionVar, value=2, command=dirReset)
direction2Button.pack(padx=5, pady=0)

chemtypeFrame = tk.Frame(chemistryFrame)
chemtypeFrame.grid(row=1,column=0)
chemtypelabel = tk.Label(chemtypeFrame, text = "Choose Chem Type")
chemtypelabel.pack()
chemVar = tk.IntVar()
chemVar.set(0)
chem1Button = tk.Radiobutton(chemtypeFrame, text="Negative", variable=chemVar, value=1)
chem1Button.pack()
chem2Button = tk.Radiobutton(chemtypeFrame, text="Neutral", variable=chemVar, value=2)
chem2Button.pack()
chem3Button = tk.Radiobutton(chemtypeFrame, text="Positive", variable=chemVar, value=3)
chem3Button.pack()

chemChangeFrame = tk.LabelFrame(chemistryFrame, text="Characters/Groups")
chemChangeFrame.grid(row=2,column=0,padx=10)
chemFrom = ttk.Combobox(chemChangeFrame, width=25, values= comboList, state="readonly")
chemFrom.set("Pick a character/group")
chemFrom.pack(padx = 3, pady = (8,3))
chemText = tk.Label(chemChangeFrame, text="with")
chemText.pack()
chemTo = ttk.Combobox(chemChangeFrame, width=25, values= comboList, state="readonly")
chemTo.set("Pick a character/group")
chemTo.pack(padx = 3, pady = 3)
chemButton = tk.Button(chemChangeFrame, text= "Change chem", command= changeChem)
chemButton.pack(pady=15)
chemFrom.bind('<<ComboboxSelected>>', chemColor)
chemTo.bind('<<ComboboxSelected>>', chemColor)

chemGlobalFrame = tk.LabelFrame(chemistryFrame, text="Global Changes")
chemGlobalFrame.grid(row=0,column=1,rowspan=2)
chemGlobalMiiVar = tk.IntVar()
chemGlobalMii = tk.Checkbutton(chemGlobalFrame, text="Apply to miis",  variable=chemGlobalMiiVar)
chemGlobalMii.pack(anchor=tk.W)
chemResetVar = tk.IntVar()
chemResetVar.set(0)
chemReset = tk.Radiobutton(chemGlobalFrame, text="Reset every chem", variable=chemResetVar, value=1)
chemReset.pack(anchor=tk.W)
chemBad = tk.Radiobutton(chemGlobalFrame, text="All bad chem", variable=chemResetVar, value=2)
chemBad.pack(anchor=tk.W)
chemNeutral = tk.Radiobutton(chemGlobalFrame, text="All neutral chem", variable=chemResetVar, value=3)
chemNeutral.pack(anchor=tk.W)
chemGood = tk.Radiobutton(chemGlobalFrame, text="All good chem", variable=chemResetVar, value=4)
chemGood.pack(anchor=tk.W)
chemGlobalButton = tk.Button(chemGlobalFrame, text="Apply Global Change", command= globalChem)
chemGlobalButton.pack(padx=5,pady=5)

chemExtraButtons = tk.LabelFrame(chemistryFrame, text="Extra Options")
chemExtraButtons.grid(row=2, column=1)
chemAllSelf = tk.Button(chemExtraButtons, text="Everyone chem with themselves", command= autoChem)
chemAllSelf.pack()
chemVariants = tk.Button(chemExtraButtons, text="Every variant chem with each other", command= variantChem)
chemVariants.pack()

chemRandomFrame = tk.LabelFrame(chemistryFrame, text="Chemistry Randomizer")
chemRandomFrame.grid(row=3,column=0,columnspan=2)
chemFullRandomFrame = tk.LabelFrame(chemRandomFrame, text="Fully Random")
chemFullRandomFrame.grid(row=0,column=0)
chemScaleBad = tk.Scale(chemFullRandomFrame, from_=0, to=10, orient=tk.HORIZONTAL,
                        sliderlength=15, length=130, label="Bad chem ratio")
chemScaleBad.pack(pady=3)
chemScaleBad.set(5)
chemScaleNeutral = tk.Scale(chemFullRandomFrame, from_=0, to=10, orient=tk.HORIZONTAL,
                            sliderlength=15, length=130, label="Neutral chem ratio")
chemScaleNeutral.pack(pady=3)
chemScaleNeutral.set(5)
chemScaleGood = tk.Scale(chemFullRandomFrame, from_=0, to=10, orient=tk.HORIZONTAL,
                         sliderlength=15, length=130, label="Good chem ratio")
chemScaleGood.pack(pady=3)
chemScaleGood.set(5)
chemFullRandomButton = tk.Button(chemFullRandomFrame, text="Randomize each chem", command= chemFullRandom)
chemFullRandomButton.pack(padx=5)

chemGraphRandomFrame = tk.LabelFrame(chemRandomFrame, text="Random Graph")
chemGraphRandomFrame.grid(row=0,column=1)
chemGraphBad = tk.Scale(chemGraphRandomFrame, from_=0, to=20, orient=tk.HORIZONTAL,
                            sliderlength=15, length=130, label="Average bad chem")
chemGraphBad.pack(pady=3)
chemGraphBad.set(5)
chemGraphGood = tk.Scale(chemGraphRandomFrame, from_=0, to=20, orient=tk.HORIZONTAL,
                            sliderlength=15, length=130, label="Average good chem")
chemGraphGood.pack(pady=3)
chemGraphGood.set(5)
chemGraphVariance = tk.Scale(chemGraphRandomFrame, from_=0, to=20, orient=tk.HORIZONTAL,
                            sliderlength=15, length=130, label="Deviation from average")
chemGraphVariance.pack(pady=3)
chemGraphVariance.set(5)
chemGraphRandomButton = tk.Button(chemGraphRandomFrame, text="Not implemented yet",fg="DarkRed" , command= chemGraphRandom)
chemGraphRandomButton.pack(padx=5)

chemRandomOptions = tk.Frame(chemRandomFrame)
chemRandomOptions.grid(row=0, column=2)
chemRandomMiiVar = tk.IntVar()
chemRandomMiis = tk.Checkbutton(chemRandomOptions, text="Randomize miis", variable=chemRandomMiiVar, command=enableRCColors)
chemRandomMiis.pack(anchor=tk.W)
chemRandomColorVar = tk.IntVar()
chemRandomColors = tk.Checkbutton(chemRandomOptions, text="Randomize colors", variable=chemRandomColorVar)
chemRandomColors.pack(anchor=tk.W)
chemRCMin = ttk.Combobox(chemRandomOptions, values=[0,1,2,3,4,5], state="readonly")
chemRCMin.set(2)
chemRCMin.pack()
chemRCLabel1 = tk.Label(chemRandomOptions, text="to")
chemRCLabel1.pack()
chemRCMax = ttk.Combobox(chemRandomOptions, values=[6,7,8,9,10,11,12,13,14,15,99], state="readonly")
chemRCMax.set(10)
chemRCMax.pack()
chemRCLabel2 = tk.Label(chemRandomOptions, text="character per color")
chemRCLabel2.pack()
chemRandomVariantVar = tk.IntVar()
chemRandomVariants = tk.Checkbutton(chemRandomOptions, text="Separate variants", variable=chemRandomVariantVar)
chemRandomVariants.pack(anchor=tk.W)
chemRandomSelfVar = tk.IntVar()
chemRandomSelf = tk.Checkbutton(chemRandomOptions, text="Allow self chem", variable=chemRandomSelfVar)
chemRandomSelf.pack(anchor=tk.W)
chemRandomAssymetricVar = tk.IntVar()
chemRandomAssymetric = tk.Checkbutton(chemRandomOptions, text="Allow assymetric chem", variable=chemRandomAssymetricVar)
chemRandomAssymetric.pack(anchor=tk.W)
chemRandomUnusedVar = tk.IntVar()
chemRandomUnused = tk.Checkbutton(chemRandomOptions, text="Allow unused characters (6 extra)", variable=chemRandomUnusedVar)
chemRandomUnused.pack(anchor=tk.W)

chemRecapFrame = tk.LabelFrame(chemistryFrame, text="Selected character/group chems")
chemRecapFrame.grid(row=0, column=2, rowspan=4)
chemRecapScrollbar = tk.Scrollbar(chemRecapFrame)
chemRecapScrollbar.pack(side=tk.RIGHT, fill=tk.Y)
chemRecap = tk.Text(chemRecapFrame, height = 39, width = 25,
                    state="disabled", wrap="word", yscrollcommand=chemRecapScrollbar.set)
chemRecap.pack()
chemRecapScrollbar.config(command = chemRecap.yview)

#Stats editor setup

glitchFrame = tk.LabelFrame(manualStatsFrame, text="Warning : modifying can cause graphical glitches", fg="DarkOrange2")
glitchFrame.grid(row=1,column=0,rowspan=2, columnspan=2, sticky=tk.EW)
glitchFrame.columnconfigure(1, weight=1)
dangerFrame = tk.LabelFrame(manualStatsFrame, text="Warning : giving a character both will crash", fg="DarkOrange2")
dangerFrame.grid(row=5,column=0,rowspan=2, columnspan=2, sticky=tk.EW)
dangerFrame.columnconfigure(1, weight=1)

labelPlayer = tk.Label(manualStatsFrame, text="Player(s) :", anchor=tk.W)
labelPlayer.grid(row=0,column=0,sticky=tk.EW)
checkStat0 = tk.Checkbutton(glitchFrame, text="Pitching Stance :", anchor=tk.W, command=partial(statCheckButton,"0"))
checkStat0.grid(row=0,column=0,sticky=tk.EW)
checkStat1 = tk.Checkbutton(glitchFrame, text="Batting Stance :", anchor=tk.W, command=partial(statCheckButton,"1"))
checkStat1.grid(row=1,column=0,sticky=tk.EW)
checkStat2 = tk.Checkbutton(manualStatsFrame, text="Character Class (0-3):", anchor=tk.W, command=partial(statCheckButton,"2"))
checkStat2.grid(row=3,column=0,sticky=tk.EW)
checkStat4 = tk.Checkbutton(manualStatsFrame, text="Weight (0-4):", anchor=tk.W, command=partial(statCheckButton,"4"))
checkStat4.grid(row=4,column=0,sticky=tk.EW)
checkStat8 = tk.Checkbutton(dangerFrame, text="Fielding Ability :", anchor=tk.W, command=partial(statCheckButton,"8"))
checkStat8.grid(row=0,column=0,sticky=tk.EW)
checkStat9 = tk.Checkbutton(dangerFrame, text="Baserunning Ability :", anchor=tk.W, command=partial(statCheckButton,"9"))
checkStat9.grid(row=1,column=0,sticky=tk.EW)
checkStat24 = tk.Checkbutton(manualStatsFrame, text="Curve (0-200):", anchor=tk.W, command=partial(statCheckButton,"24"))
checkStat24.grid(row=7,column=0,sticky=tk.EW)
checkStat22 = tk.Checkbutton(manualStatsFrame, text="Curveball Speed (70-200): ", anchor=tk.W, command=partial(statCheckButton,"22"))
checkStat22.grid(row=8,column=0,sticky=tk.EW)
checkStat23 = tk.Checkbutton(manualStatsFrame, text="Charge Pitch Speed(70-200):", anchor=tk.W, command=partial(statCheckButton,"23"))
checkStat23.grid(row=9,column=0,sticky=tk.EW)
checkStat28 = tk.Checkbutton(manualStatsFrame, text="Stamina (0-100):", anchor=tk.W, command=partial(statCheckButton,"28"))
checkStat28.grid(row=10,column=0,sticky=tk.EW)
checkStat10 = tk.Checkbutton(manualStatsFrame, text="Slap Contact Size (10-200):", anchor=tk.W, command=partial(statCheckButton,"10"))
checkStat10.grid(row=11,column=0,sticky=tk.EW)
checkStat12 = tk.Checkbutton(manualStatsFrame, text="Slap Hit Power (0-150):", anchor=tk.W, command=partial(statCheckButton,"12"))
checkStat12.grid(row=12,column=0,sticky=tk.EW)
checkStat11 = tk.Checkbutton(manualStatsFrame, text="Charge Contact Size (10-200):", anchor=tk.W, command=partial(statCheckButton,"11"))
checkStat11.grid(row=13,column=0,sticky=tk.EW)
checkStat13 = tk.Checkbutton(manualStatsFrame, text="Charge Hit Power (0-150):", anchor=tk.W, command=partial(statCheckButton,"13"))
checkStat13.grid(row=14,column=0,sticky=tk.EW)
checkStat26 = tk.Checkbutton(manualStatsFrame, text="Hit Trajectory :", anchor=tk.W, command=partial(statCheckButton,"26"))
checkStat26.grid(row=15,column=0,sticky=tk.EW)
checkStat27 = tk.Checkbutton(manualStatsFrame, text="Hit Curve :", anchor=tk.W, command=partial(statCheckButton,"27"))
checkStat27.grid(row=16,column=0,sticky=tk.EW)
checkStat14 = tk.Checkbutton(manualStatsFrame, text="Bunting (0-200):", anchor=tk.W, command=partial(statCheckButton,"14"))
checkStat14.grid(row=17,column=0,sticky=tk.EW)
checkStat16 = tk.Checkbutton(manualStatsFrame, text="Outfield Throwing Speed (0-200):", anchor=tk.W, command=partial(statCheckButton,"16"))
checkStat16.grid(row=18,column=0,sticky=tk.EW)
checkStat17 = tk.Checkbutton(manualStatsFrame, text="Fielding (0-200):", anchor=tk.W, command=partial(statCheckButton,"17"))
checkStat17.grid(row=19,column=0,sticky=tk.EW)
checkStat15 = tk.Checkbutton(manualStatsFrame, text="Speed (0-200):", anchor=tk.W, command=partial(statCheckButton,"15"))
checkStat15.grid(row=20,column=0,sticky=tk.EW)
checkStat18 = tk.Checkbutton(manualStatsFrame, text="Displayed Pitching (0-10):", anchor=tk.W, command=partial(statCheckButton,"18"))
checkStat18.grid(row=21,column=0,sticky=tk.EW)
checkStat19 = tk.Checkbutton(manualStatsFrame, text="Displayed Batting (0-10):", anchor=tk.W, command=partial(statCheckButton,"19"))
checkStat19.grid(row=22,column=0,sticky=tk.EW)
checkStat20 = tk.Checkbutton(manualStatsFrame, text="Displayed Fielding (0-10):", anchor=tk.W, command=partial(statCheckButton,"20"))
checkStat20.grid(row=23,column=0,sticky=tk.EW)
checkStat21 = tk.Checkbutton(manualStatsFrame, text="Displayed Speed (0-10):", anchor=tk.W, command=partial(statCheckButton,"21"))
checkStat21.grid(row=24,column=0,sticky=tk.EW)
checkStat5 = tk.Checkbutton(manualStatsFrame, text="Captain :", anchor=tk.W, command=partial(statCheckButton,"5"))
checkStat5.grid(row=7,column=2,sticky=tk.EW)
checkStat6 = tk.Checkbutton(manualStatsFrame, text="Captain Star Pitch:", anchor=tk.W, command=partial(statCheckButton,"6"))
checkStat6.grid(row=8,column=2,sticky=tk.EW)
checkStat7 = tk.Checkbutton(manualStatsFrame, text="Captain Star Swing:", anchor=tk.W, command=partial(statCheckButton,"7"))
checkStat7.grid(row=9,column=2,sticky=tk.EW)
checkStat29 = tk.Checkbutton(manualStatsFrame, text="Standard Star Pitch:", anchor=tk.W, command=partial(statCheckButton,"29"))
checkStat29.grid(row=10,column=2,sticky=tk.EW)
checkStat3 = tk.Checkbutton(manualStatsFrame, text="Unknown Stat (old traj):", anchor=tk.W, command=partial(statCheckButton,"3"))
checkStat3.grid(row=11,column=2,sticky=tk.EW)
checkStat25 = tk.Checkbutton(manualStatsFrame, text="Unknown Stat (old stamina):", anchor=tk.W, command=partial(statCheckButton,"25"))
checkStat25.grid(row=12,column=2,sticky=tk.EW)

cbPlayer = ttk.Combobox(manualStatsFrame, width=25, values=comboList, state="readonly")
cbPlayer.set("Pick a character/group")
cbPlayer.grid(row=0,column=1)
cbPlayer.bind('<<ComboboxSelected>>', statPlayerChange)
sbStat0 = ttk.Combobox(glitchFrame, width=19, values=["Right","Left"], state="disabled")
sbStat0.grid(row=0,column=1,sticky=tk.E,padx=15)
sbStat1 = ttk.Combobox(glitchFrame, width=19, values=["Right","Left"], state="disabled")
sbStat1.grid(row=1,column=1,sticky=tk.E,padx=15)
sbStat2 = ttk.Combobox(manualStatsFrame, width=19, values=classList, state="disabled")
sbStat2.grid(row=3,column=1)
sbStat4 = ttk.Spinbox(manualStatsFrame, from_=0, to=4, state="disabled")
sbStat4.grid(row=4,column=1)
sbStat8 = ttk.Combobox(dangerFrame, width=19, values=fieldingAbilitiesList, state="disabled")
sbStat8.grid(row=0,column=1,sticky=tk.E,padx=15)
sbStat9 = ttk.Combobox(dangerFrame, width=19, values=baserunningAbilitiesList, state="disabled")
sbStat9.grid(row=1,column=1,sticky=tk.E,padx=15)
sbStat24 = ttk.Spinbox(manualStatsFrame, from_=0, to=200, state="disabled")
sbStat24.grid(row=7,column=1)
sbStat22 = ttk.Spinbox(manualStatsFrame, from_=70, to=200, state="disabled")
sbStat22.grid(row=8,column=1)
sbStat23 = ttk.Spinbox(manualStatsFrame, from_=70, to=200, state="disabled")
sbStat23.grid(row=9,column=1)
sbStat28 = ttk.Spinbox(manualStatsFrame, from_=0, to=100, state="disabled")
sbStat28.grid(row=10,column=1)
sbStat10 = ttk.Spinbox(manualStatsFrame, from_=10, to=200, state="disabled")
sbStat10.grid(row=11,column=1)
sbStat12 = ttk.Spinbox(manualStatsFrame, from_=0, to=150, state="disabled")
sbStat12.grid(row=12,column=1)
sbStat11 = ttk.Spinbox(manualStatsFrame, from_=10, to=200, state="disabled")
sbStat11.grid(row=13,column=1)
sbStat13 = ttk.Spinbox(manualStatsFrame, from_=0, to=150, state="disabled")
sbStat13.grid(row=14,column=1)
sbStat26 = ttk.Combobox(manualStatsFrame, width=19, values=trajList, state="disabled")
sbStat26.grid(row=15,column=1)
sbStat27 = ttk.Combobox(manualStatsFrame, width=19, values=["Disabled","Enabled"], state="disabled")
sbStat27.grid(row=16,column=1)
sbStat14 = ttk.Spinbox(manualStatsFrame, from_=0, to=200, state="disabled")
sbStat14.grid(row=17,column=1)
sbStat16 = ttk.Spinbox(manualStatsFrame, from_=0, to=200, state="disabled")
sbStat16.grid(row=18,column=1)
sbStat17 = ttk.Spinbox(manualStatsFrame, from_=0, to=200, state="disabled")
sbStat17.grid(row=19,column=1)
sbStat15 = ttk.Spinbox(manualStatsFrame, from_=0, to=200, state="disabled")
sbStat15.grid(row=20,column=1)
sbStat18 = ttk.Spinbox(manualStatsFrame, from_=0, to=10, state="disabled")
sbStat18.grid(row=21,column=1)
sbStat19 = ttk.Spinbox(manualStatsFrame, from_=0, to=10, state="disabled")
sbStat19.grid(row=22,column=1)
sbStat20 = ttk.Spinbox(manualStatsFrame, from_=0, to=10, state="disabled")
sbStat20.grid(row=23,column=1)
sbStat21 = ttk.Spinbox(manualStatsFrame, from_=0, to=10, state="disabled")
sbStat21.grid(row=24,column=1)
sbStat5 = ttk.Combobox(manualStatsFrame, width=19, values=["No","Yes"], state="disabled")
sbStat5.grid(row=7,column=3)
sbStat5.bind('<<ComboboxSelected>>', statCaptainChange)
sbStat6 = ttk.Combobox(manualStatsFrame, width=19, values=starPitchList, state="disabled")
sbStat6.grid(row=8,column=3)
sbStat7 = ttk.Combobox(manualStatsFrame, width=19, values=starSwingList, state="disabled")
sbStat7.grid(row=9,column=3)
sbStat29 = ttk.Combobox(manualStatsFrame, width=19, values=starPitchTypeList, state="disabled")
sbStat29.grid(row=10,column=3)
sbStat3 = ttk.Spinbox(manualStatsFrame, from_=0, to=2, state="disabled")
sbStat3.grid(row=11,column=3)
sbStat25 = ttk.Spinbox(manualStatsFrame, from_=0, to=100, state="disabled")
sbStat25.grid(row=12,column=3)

statsActionFrame = tk.LabelFrame(manualStatsFrame, text="Actions")
statsActionFrame.grid(row=0,column=2,rowspan=6,padx=20)
statsChange = tk.Button(statsActionFrame, text="Change Stats", command=changeStats)
statsChange.pack(pady=2)
statsChange = tk.Button(statsActionFrame, text="Change Stats for everyone", command=changeStatsE)
statsChange.pack(pady=5)
statsReset = tk.Button(statsActionFrame, text="Reset Selected Stats", command=resetStats)
statsReset.pack(pady=(5,0))
statsAllReset = tk.Button(statsActionFrame, text="Reset All Stats", command=resetStatsA)
statsAllReset.pack(pady=(0,5))
statsResetEveryone = tk.Button(statsActionFrame, text="Reset Selected Stats for everyone", command=resetStatsE)
statsResetEveryone.pack(pady=(5,0))
statsAllResetEveryone = tk.Button(statsActionFrame, text="Reset All Stats for everyone", command=resetStatsAE)
statsAllResetEveryone.pack(pady=(0,5))


#Stat Randomizer

randPlayerList = []

randGlitchFrame = tk.LabelFrame(randomStatsFrame, text="Warning : can cause graphical glitches", fg="DarkOrange2")
randGlitchFrame.grid(row=1,column=0,rowspan=2, sticky=tk.EW)
randGlitchFrame.columnconfigure(1, weight=1)
randDangerFrame = tk.LabelFrame(randomStatsFrame, text="Warning : modifying can cause crashes", fg="DarkOrange2")
randDangerFrame.grid(row=5,column=0,rowspan=2, sticky=tk.EW)
randDangerFrame.columnconfigure(1, weight=1)


randLabelStats = tk.Label(randomStatsFrame, text="Choose stats to randomize :", anchor=tk.W)
randLabelStats.grid(row=0,column=0,sticky=tk.EW)
randCheckStat0 = tk.Checkbutton(randGlitchFrame, text="Pitching Stance", anchor=tk.W, command=partial(randCheckButton,"0"))
randCheckStat0.grid(row=0,column=0,sticky=tk.EW)
randCheckStat1 = tk.Checkbutton(randGlitchFrame, text="Batting Stance", anchor=tk.W, command=partial(randCheckButton,"1"))
randCheckStat1.grid(row=1,column=0,sticky=tk.EW)
randCheckStat2 = tk.Checkbutton(randomStatsFrame, text="Character Class", anchor=tk.W, command=partial(randCheckButton,"2"))
randCheckStat2.grid(row=3,column=0,sticky=tk.EW)
randCheckStat4 = tk.Checkbutton(randomStatsFrame, text="Weight", anchor=tk.W, command=partial(randCheckButton,"3"))
randCheckStat4.grid(row=4,column=0,sticky=tk.EW)
randCheckStat8 = tk.Checkbutton(randDangerFrame, text="Fielding Ability", anchor=tk.W, command=partial(randCheckButton,"4"))
randCheckStat8.grid(row=0,column=0,sticky=tk.EW)
randCheckStat9 = tk.Checkbutton(randDangerFrame, text="Baserunning Ability", anchor=tk.W, command=partial(randCheckButton,"5"))
randCheckStat9.grid(row=1,column=0,sticky=tk.EW)
randCheckStat24 = tk.Checkbutton(randomStatsFrame, text="Curve (0-200)", anchor=tk.W, command=partial(randCheckButton,"20"))
randCheckStat24.grid(row=7,column=0,sticky=tk.EW)
randCheckStat22 = tk.Checkbutton(randomStatsFrame, text="Curveball Speed (70-200) ", anchor=tk.W, command=partial(randCheckButton,"18"))
randCheckStat22.grid(row=8,column=0,sticky=tk.EW)
randCheckStat23 = tk.Checkbutton(randomStatsFrame, text="Charge Pitch Speed(70-200)", anchor=tk.W, command=partial(randCheckButton,"19"))
randCheckStat23.grid(row=9,column=0,sticky=tk.EW)
randCheckStat28 = tk.Checkbutton(randomStatsFrame, text="Stamina (0-100)", anchor=tk.W, command=partial(randCheckButton,"21"))
randCheckStat28.grid(row=10,column=0,sticky=tk.EW)
randCheckStat10 = tk.Checkbutton(randomStatsFrame, text="Slap Contact Size (10-200)", anchor=tk.W, command=partial(randCheckButton,"6"))
randCheckStat10.grid(row=11,column=0,sticky=tk.EW)
randCheckStat12 = tk.Checkbutton(randomStatsFrame, text="Slap Hit Power (0-150)", anchor=tk.W, command=partial(randCheckButton,"8"))
randCheckStat12.grid(row=12,column=0,sticky=tk.EW)
randCheckStat11 = tk.Checkbutton(randomStatsFrame, text="Charge Contact Size (10-200)", anchor=tk.W, command=partial(randCheckButton,"7"))
randCheckStat11.grid(row=13,column=0,sticky=tk.EW)
randCheckStat13 = tk.Checkbutton(randomStatsFrame, text="Charge Hit Power (0-150)", anchor=tk.W, command=partial(randCheckButton,"9"))
randCheckStat13.grid(row=14,column=0,sticky=tk.EW)
randCheckStat14 = tk.Checkbutton(randomStatsFrame, text="Bunting (0-200)", anchor=tk.W, command=partial(randCheckButton,"10"))
randCheckStat14.grid(row=15,column=0,sticky=tk.EW)
randCheckStat16 = tk.Checkbutton(randomStatsFrame, text="Outfield Throwing Speed (0-200)", anchor=tk.W, command=partial(randCheckButton,"12"))
randCheckStat16.grid(row=16,column=0,sticky=tk.EW)
randCheckStat17 = tk.Checkbutton(randomStatsFrame, text="Fielding (0-200)", anchor=tk.W, command=partial(randCheckButton,"13"))
randCheckStat17.grid(row=17,column=0,sticky=tk.EW)
randCheckStat15 = tk.Checkbutton(randomStatsFrame, text="Speed (0-200)", anchor=tk.W, command=partial(randCheckButton,"11"))
randCheckStat15.grid(row=18,column=0,sticky=tk.EW)
randCheckStat26 = tk.Checkbutton(randomStatsFrame, text="Hit Trajectory", anchor=tk.W, command=partial(randCheckButton,"22"))
randCheckStat26.grid(row=19,column=0,sticky=tk.EW)
randCheckStat27 = tk.Checkbutton(randomStatsFrame, text="Hit Curve", anchor=tk.W, command=partial(randCheckButton,"23"))
randCheckStat27.grid(row=20,column=0,sticky=tk.EW)

randStatLabelPlayer = tk.Label(randomStatsFrame, text="Choose character/group to add :")
randStatLabelPlayer.grid(row=0,column=1)
randStatPlayer = ttk.Combobox(randomStatsFrame, width=25, values=comboList, state="readonly")
randStatPlayer.set("Pick a character/group")
randStatPlayer.grid(row=1,column=1)
randStatAddPlayer = tk.Button(randomStatsFrame, text="Add to randomizer", command=addPlayerRand)
randStatAddPlayer.grid(row=2,column=1)
randStatRemovePlayer = tk.Button(randomStatsFrame, text="Remove from randomizer", command=removePlayerRand)
randStatRemovePlayer.grid(row=3,column=1)
randStatEveryPlayerVar = tk.IntVar()
randStatEveryPlayer = tk.Checkbutton(randomStatsFrame, text="Randomize everyone", variable=randStatEveryPlayerVar)
randStatEveryPlayer.grid(row=4,column=1)
randStatButton = tk.Button(randomStatsFrame, text="! ! ! RANDOMIZE ! ! !", fg="red", command=randomizeStats)
randStatButton.grid(row=5,column=1)
randStatLabelMin = tk.Label(randomStatsFrame, text="Minimum :")
randStatLabelMin.grid(row=6,column=1)
randStat24min = ttk.Spinbox(randomStatsFrame, from_=0, to=200, state="disabled")
randStat24min.grid(row=7,column=1)
randStat24min.set(5)
randStat22min = ttk.Spinbox(randomStatsFrame, from_=70, to=200, state="disabled")
randStat22min.grid(row=8,column=1)
randStat22min.set(70)
randStat23min = ttk.Spinbox(randomStatsFrame, from_=70, to=200, state="disabled")
randStat23min.grid(row=9,column=1)
randStat23min.set(80)
randStat28min = ttk.Spinbox(randomStatsFrame, from_=0, to=100, state="disabled")
randStat28min.grid(row=10,column=1)
randStat28min.set(10)
randStat10min = ttk.Spinbox(randomStatsFrame, from_=10, to=200, state="disabled")
randStat10min.grid(row=11,column=1)
randStat10min.set(45)
randStat12min = ttk.Spinbox(randomStatsFrame, from_=0, to=150, state="disabled")
randStat12min.grid(row=12,column=1)
randStat12min.set(10)
randStat11min = ttk.Spinbox(randomStatsFrame, from_=10, to=200, state="disabled")
randStat11min.grid(row=13,column=1)
randStat11min.set(30)
randStat13min = ttk.Spinbox(randomStatsFrame, from_=0, to=150, state="disabled")
randStat13min.grid(row=14,column=1)
randStat13min.set(20)
randStat14min = ttk.Spinbox(randomStatsFrame, from_=0, to=200, state="disabled")
randStat14min.grid(row=15,column=1)
randStat14min.set(10)
randStat16min = ttk.Spinbox(randomStatsFrame, from_=0, to=200, state="disabled")
randStat16min.grid(row=16,column=1)
randStat16min.set(20)
randStat17min = ttk.Spinbox(randomStatsFrame, from_=0, to=200, state="disabled")
randStat17min.grid(row=17,column=1)
randStat17min.set(20)
randStat15min = ttk.Spinbox(randomStatsFrame, from_=0, to=200, state="disabled")
randStat15min.grid(row=18,column=1)
randStat15min.set(10)

randRecapFrame = tk.Frame(randomStatsFrame)
randRecapFrame.grid(row=0,column=2,rowspan=6,columnspan=2)
randRecapScrollbar = tk.Scrollbar(randRecapFrame)
randRecapScrollbar.pack(side=tk.RIGHT, fill=tk.Y)
randRecap = tk.Text(randRecapFrame, height = 11, width = 34, wrap="word", yscrollcommand=randRecapScrollbar.set)
randRecap.pack()
randRecap.insert(tk.END,"No character added to randomizer")
randRecap.configure(state="disabled")
randRecapScrollbar.config(command = chemRecap.yview)
randStatLabelMax = tk.Label(randomStatsFrame, text="Maximum :")
randStatLabelMax.grid(row=6,column=2)
randStat24max = ttk.Spinbox(randomStatsFrame, from_=0, to=200, state="disabled")
randStat24max.grid(row=7,column=2)
randStat24max.set(90)
randStat22max = ttk.Spinbox(randomStatsFrame, from_=70, to=200, state="disabled")
randStat22max.grid(row=8,column=2)
randStat22max.set(150)
randStat23max = ttk.Spinbox(randomStatsFrame, from_=70, to=200, state="disabled")
randStat23max.grid(row=9,column=2)
randStat23max.set(175)
randStat28max = ttk.Spinbox(randomStatsFrame, from_=0, to=100, state="disabled")
randStat28max.grid(row=10,column=2)
randStat28max.set(100)
randStat10max = ttk.Spinbox(randomStatsFrame, from_=10, to=200, state="disabled")
randStat10max.grid(row=11,column=2)
randStat10max.set(80)
randStat12max = ttk.Spinbox(randomStatsFrame, from_=0, to=150, state="disabled")
randStat12max.grid(row=12,column=2)
randStat12max.set(65)
randStat11max = ttk.Spinbox(randomStatsFrame, from_=10, to=200, state="disabled")
randStat11max.grid(row=13,column=2)
randStat11max.set(60)
randStat13max = ttk.Spinbox(randomStatsFrame, from_=0, to=150, state="disabled")
randStat13max.grid(row=14,column=2)
randStat13max.set(90)
randStat14max = ttk.Spinbox(randomStatsFrame, from_=0, to=200, state="disabled")
randStat14max.grid(row=15,column=2)
randStat14max.set(90)
randStat16max = ttk.Spinbox(randomStatsFrame, from_=0, to=200, state="disabled")
randStat16max.grid(row=16,column=2)
randStat16max.set(90)
randStat17max = ttk.Spinbox(randomStatsFrame, from_=0, to=200, state="disabled")
randStat17max.grid(row=17,column=2)
randStat17max.set(85)
randStat15max = ttk.Spinbox(randomStatsFrame, from_=0, to=200, state="disabled")
randStat15max.grid(row=18,column=2)
randStat15max.set(90)

randStatLabelRange = tk.Label(randomStatsFrame, text="Range (on each side):")
randStatLabelRange.grid(row=6,column=3)
randStat24range = ttk.Spinbox(randomStatsFrame, from_=0, to=200, state="disabled")
randStat24range.grid(row=7,column=3)
randStat24range.set(10)
randStat22range = ttk.Spinbox(randomStatsFrame, from_=0, to=130, state="disabled")
randStat22range.grid(row=8,column=3)
randStat22range.set(10)
randStat23range = ttk.Spinbox(randomStatsFrame, from_=0, to=130, state="disabled")
randStat23range.grid(row=9,column=3)
randStat23range.set(10)
randStat28range = ttk.Spinbox(randomStatsFrame, from_=0, to=100, state="disabled")
randStat28range.grid(row=10,column=3)
randStat28range.set(10)
randStat10range = ttk.Spinbox(randomStatsFrame, from_=0, to=190, state="disabled")
randStat10range.grid(row=11,column=3)
randStat10range.set(10)
randStat12range = ttk.Spinbox(randomStatsFrame, from_=0, to=150, state="disabled")
randStat12range.grid(row=12,column=3)
randStat12range.set(10)
randStat11range = ttk.Spinbox(randomStatsFrame, from_=0, to=190, state="disabled")
randStat11range.grid(row=13,column=3)
randStat11range.set(10)
randStat13range = ttk.Spinbox(randomStatsFrame, from_=0, to=150, state="disabled")
randStat13range.grid(row=14,column=3)
randStat13range.set(10)
randStat14range = ttk.Spinbox(randomStatsFrame, from_=0, to=200, state="disabled")
randStat14range.grid(row=15,column=3)
randStat14range.set(10)
randStat16range = ttk.Spinbox(randomStatsFrame, from_=0, to=200, state="disabled")
randStat16range.grid(row=16,column=3)
randStat16range.set(10)
randStat17range = ttk.Spinbox(randomStatsFrame, from_=0, to=200, state="disabled")
randStat17range.grid(row=17,column=3)
randStat17range.set(10)
randStat15range = ttk.Spinbox(randomStatsFrame, from_=0, to=200, state="disabled")
randStat15range.grid(row=18,column=3)
randStat15range.set(10)

randOptionsFrame = tk.Frame(randomStatsFrame)
randOptionsFrame.grid(row=21,column=0,columnspan=5, sticky=tk.W)
randPitchBarVar=tk.IntVar()
randPitchBar = tk.Checkbutton(randOptionsFrame, text="Randomize Pitching bar", variable=randPitchBarVar, command=pitchUpdate)
randPitchBar.grid(row=0,column=0)
randDisplayPitchVar = tk.IntVar()
randDisplayPitch = tk.Checkbutton(randOptionsFrame, text="Update Pitching bar", variable=randDisplayPitchVar)
randDisplayPitch.grid(row=0,column=1)
randDisplayStatsVar = tk.IntVar()
randDisplayStats = tk.Checkbutton(randOptionsFrame, text="Update other stat bars", variable=randDisplayStatsVar)
randDisplayStats.grid(row=0,column=2)
randStatDoubleAbilityVar = tk.IntVar()
randStatDoubleAbility = tk.Checkbutton(randOptionsFrame, text="Allow double ablities", variable=randStatDoubleAbilityVar)
randStatDoubleAbility.grid(row=0,column=3)
randDistribution = tk.Scale(randomStatsFrame, from_=0, to=10, orient=tk.HORIZONTAL,
                            sliderlength=15, length=200, label="Distribution (0-Uniform, 10-Normal)")
randDistribution.grid(row=19,column=1,rowspan=2,columnspan=3)
randDistribution.set(0)
randVariationVar = tk.IntVar()
randVariation = tk.Checkbutton(randOptionsFrame, text="Modify around current stats", variable=randVariationVar, command=variationMode)
randVariation.grid(row=0,column=4)

randLinkFrame = tk.Frame(randomStatsFrame)
randLinkFrame.grid(row=22, column=0, rowspan=3, columnspan=5)
randLinkPitchVar = tk.IntVar()
randLinkPitch = tk.Checkbutton(randLinkFrame, text="Force charge pitch speed XX% higher than curveball speed (0 to only limit):", variable=randLinkPitchVar, command=linkPitch)
randLinkPitch.grid(row=0, column=0)
randLinkContactVar = tk.IntVar()
randLinkContact = tk.Checkbutton(randLinkFrame, text="Force charge contact XX% lower than slap contact (0 to only limit):", variable=randLinkContactVar, command=linkContact)
randLinkContact.grid(row=1, column=0)
randLinkPowerVar = tk.IntVar()
randLinkPower = tk.Checkbutton(randLinkFrame, text="Force charge power XX% higher than slap power (0 to only limit):", variable=randLinkPowerVar, command=linkPower)
randLinkPower.grid(row=2, column=0)
randLinkPitchSb = ttk.Spinbox(randLinkFrame, from_=0, to=100, state="disabled")
randLinkPitchSb.grid(row=0, column=1)
randLinkPitchSb.set(15)
randLinkContactSb = ttk.Spinbox(randLinkFrame, from_=0, to=100, state="disabled")
randLinkContactSb.grid(row=1, column=1)
randLinkContactSb.set(33)
randLinkPowerSb = ttk.Spinbox(randLinkFrame, from_=0, to=100, state="disabled")
randLinkPowerSb.grid(row=2, column=1)
randLinkPowerSb.set(25)

#Traj Heights Code

labelTrajGroup = tk.Label(trajFrame, text="Select a trajectory to edit :")
labelTrajGroup.grid(row=0, column=0)
trajGroup = ttk.Combobox(trajFrame, values=trajAllList, width=18, state="readonly")
trajGroup.set("Pick a trajectory")
trajGroup.grid(row=0, column=1)
trajGroup.bind('<<ComboboxSelected>>',trajChanged)
trajGroupActiveVar = tk.IntVar()
trajGroupActive = tk.Checkbutton(trajFrame, text="Use traj group ?", variable=trajGroupActiveVar, command=activateGroup, state="disabled")
trajGroupActiveVar.set(1)
trajGroupActive.grid(row=0,column=2)
trajChangeNameLabel = tk.Label(trajFrame, text="Change trajectory name :")
trajChangeNameLabel.grid(row=0,column=3)
trajChangeName = tk.Entry(trajFrame, width=18)
trajChangeName.grid(row=0,column=4)
trajChangeNameButton = tk.Button(trajFrame, text="Change Name", command=changeTrajName)
trajChangeNameButton.grid(row=0,column=5,padx=(5,0),pady=5)


trajBoxesFrame = tk.LabelFrame(trajFrame)
trajBoxesFrame.grid(row=1,column=0,rowspan=21,columnspan=6)

trajLabelFarInside = tk.Label(trajBoxesFrame, text="Far Inside")
trajLabelFarInside.grid(row=1, column=1,pady=10,padx=20)
trajLabelInside = tk.Label(trajBoxesFrame, text="Inside")
trajLabelInside.grid(row=1, column=2,pady=10,padx=20)
trajLabelSweetSpot = tk.Label(trajBoxesFrame, text="Sweet Spot")
trajLabelSweetSpot.grid(row=1, column=3,pady=10,padx=20)
trajLabelOutside = tk.Label(trajBoxesFrame, text="Outside")
trajLabelOutside.grid(row=1, column=4,pady=10,padx=20)
trajLabelFarOutside = tk.Label(trajBoxesFrame, text="Far Outside")
trajLabelFarOutside.grid(row=1, column=5,pady=10,padx=20)


trajLabelHumanSlap = tk.Label(trajBoxesFrame, text="Human Slap")
trajLabelHumanSlap.grid(row=2,rowspan=5,column=0,padx=5)
trajLabelAiSlap = tk.Label(trajBoxesFrame, text="AI Slap")
trajLabelAiSlap.grid(row=7,rowspan=5,column=0)
trajLabelHumanCharge = tk.Label(trajBoxesFrame, text="Human Charge")
trajLabelHumanCharge.grid(row=12,rowspan=5,column=0)
trajLabelAiCharge = tk.Label(trajBoxesFrame, text="AI Charge")
trajLabelAiCharge.grid(row=17,rowspan=5,column=0)



trajSpinboxes=[[[],[],[],[],[]],
               [[],[],[],[],[]],
               [[],[],[],[],[]],
               [[],[],[],[],[]]]
for i in range(4):
    for j in range(5):
        for k in range(4):
            trajSpinbox = ttk.Spinbox(trajBoxesFrame, from_=0, to=100, width=5, state="disabled")
            trajSpinbox.grid(row=i*5+6-k,column=j+1)
            trajSpinboxes[i][j].append(trajSpinbox)
        trajSpinbox = ttk.Spinbox(trajBoxesFrame, from_=0, to=100, width=5, state="disabled")
        trajSpinbox.grid(row=i*5+2,column=j+1,pady=(30*(int((i+4)/5)),0))
        trajSpinboxes[i][j].append(trajSpinbox)
        labtext = ["Highest","High","Middle","Low","Lowest"][j]
        trajLabelHeight = tk.Label(trajBoxesFrame, text=labtext)
        trajLabelHeight.grid(row=i*5+j+2,column=7,padx=5,pady=(30*(int((5-j)/5)*int((i+19)/20)),0))

trajValidateValues = tk.Button(trajFrame, text="Modify Trajectory", command=changeTraj)
trajValidateValues.grid(row=22,column=1,columnspan=2,pady=10)
trajResetTraj = tk.Button(trajFrame, text="Reset Trajectory", command=resetTraj)
trajResetTraj.grid(row=22,column=3,columnspan=2)
trajLabelExplanation = tk.Label(trajFrame, text="If the values in a set don't sum to 100, they will get updated to reflect how the game would interpret them")
trajLabelExplanation.grid(row=23,column=0,columnspan=6)

#Gecko Code

geckoPlayerList = []

geckoDisplayFrame = tk.Frame(geckoFrame)
geckoDisplayFrame.grid(row=0, column=4, rowspan=40, padx=5)
geckoCopyButton = tk.Button(geckoDisplayFrame, text="Copy to clipboard", command=geckoCopy)
geckoCopyButton.pack(pady=(5,0))
geckoDisplayLabel = tk.Label(geckoDisplayFrame, text="Gecko code :")
geckoDisplayLabel.pack()
geckoDisplayScrollbar = tk.Scrollbar(geckoDisplayFrame)
geckoDisplayScrollbar.pack(side=tk.RIGHT, fill=tk.Y)
geckoDisplay = tk.Text(geckoDisplayFrame, height=38, width=20, state="disabled", yscrollcommand=geckoDisplayScrollbar.set)
geckoDisplay.pack()
geckoDisplayScrollbar.config(command=geckoDisplay.yview)


geckoGenerateFrame = tk.Frame(geckoFrame)
geckoGenerateFrame.grid(row=0, column=0, columnspan=4)

geckoGenerateAll = tk.Button(geckoGenerateFrame, text="Generate entire code", command=geckoAll)
geckoGenerateAll.grid(row=0, column=0, padx=5, pady=5)
geckoGeneratePart = tk.Button(geckoGenerateFrame, text="Generate for selection", command= geckoPart)
geckoGeneratePart.grid(row=0, column=1, padx=5, pady=5)
geckoGeneratePartExclude = tk.Button(geckoGenerateFrame, text="Generate for selection (rest is vanilla)", command= geckoPartExclude)
geckoGeneratePartExclude.grid(row=0, column=2, padx=5, pady=5)
geckoWarningFrame = tk.Frame(geckoFrame)
geckoWarningFrame.grid(row=1, column=0, columnspan=4)
geckoWarning = tk.Label(geckoWarningFrame, text="")
geckoWarning.pack()

geckoFileFrame = tk.LabelFrame(geckoFrame, text="Saved changes manager (file name can't contain spaces or special characters)")
geckoFileFrame.grid(row=2, column=0, columnspan=4)
geckoFile = tk.Entry(geckoFileFrame, width=80)
geckoFile.pack(padx=5)
geckoFile.insert("0","File Name")
geckoLoad = tk.Button(geckoFileFrame, text="Load changes", width=10, command=loadChanges)
geckoLoad.pack(side=tk.LEFT, padx=5, pady=5)
geckoSave = tk.Button(geckoFileFrame, text="Save changes", width=10, command=saveChanges)
geckoSave.pack(side=tk.LEFT, padx=5)
geckoSecurityVar = tk.IntVar()
geckoSecurity = tk.Checkbutton(geckoFileFrame, text="Override savefile", variable=geckoSecurityVar)
geckoSecurity.pack(side=tk.LEFT)

geckoPlayersFrame = tk.LabelFrame(geckoFrame, text="Characters selection")
geckoPlayersFrame.grid(row=3, column=0, columnspan=4)
geckoRecapFrame = tk.Frame(geckoPlayersFrame)
geckoRecapFrame.pack(side=tk.RIGHT, padx=5, pady=5)
geckoPlayersScrollbar = tk.Scrollbar(geckoRecapFrame)
geckoPlayersScrollbar.pack(side=tk.RIGHT, fill=tk.Y)
geckoPlayers = tk.Text(geckoRecapFrame, height = 11, width = 34, wrap="word", yscrollcommand=geckoPlayersScrollbar.set)
geckoPlayers.pack()
geckoPlayers.insert(tk.END,"No character selected")
geckoPlayers.configure(state="disabled")
geckoPlayersScrollbar.config(command = geckoPlayers.yview)
geckoPlayerLabel = tk.Label(geckoPlayersFrame, text="Choose character/group to add :")
geckoPlayerLabel.pack(side=tk.TOP, padx=5, pady=5)
geckoPlayerSelection = ttk.Combobox(geckoPlayersFrame, width=25, values=comboList, state="readonly")
geckoPlayerSelection.set("Pick a character/group")
geckoPlayerSelection.pack(side=tk.TOP, padx=5, pady=5)
geckoAddPlayer = tk.Button(geckoPlayersFrame, text="Add to selection", command=addPlayerGecko)
geckoAddPlayer.pack(side=tk.TOP, padx=5, pady=5)
geckoRemovePlayer = tk.Button(geckoPlayersFrame, text="Remove from selection", command=removePlayerGecko)
geckoRemovePlayer.pack(side=tk.TOP, padx=5, pady=5)
geckoClearSelection = tk.Button(geckoPlayersFrame, text="Clear selection", command=clearPlayersGecko)
geckoClearSelection.pack(side=tk.TOP, padx=5, pady=5)

#Wacky Stuff

wackyInverseChem = tk.Button(wackyFrame, text="Reverse Chem", command=reverseChem)
wackyInverseChem.grid(row=0, column=0)
wackyReverseStats = tk.Button(wackyFrame, text="Reverse Stats", command=reverseStats)
wackyReverseStats.grid(row=1, column=0)
wackyInverseHand = tk.Button(wackyFrame, text="Reverse Handedness", command=reverseHand)
wackyInverseHand.grid(row=2, column=0)
wackyDevModeVar = tk.IntVar()
wackyDevMode = tk.Checkbutton(wackyFrame, text="Dev Mode (unlock limits on stat edition)",variable=wackyDevModeVar, command=devMode)
wackyDevMode.grid(row=3,column=0)
'''
wrongHand = tk.Frame(wackyFrame)
wrongHand.pack()
whButton = tk.Button(wrongHand, text= "make everyone switch handedness", command= switchHand)
whButton.pack()
chemSwap = tk.Button(wackyFrame, text="invert good and bad chem", command=chemInvert)
chemSwap.pack()
wackyPost = tk.Text(wackyFrame)
wackyPost.pack()

All chem special code
'''

#Credits

credits1 = tk.Label(creditsFrame, text="Thanks to :", font=('Arial',15))
credits1.pack(pady=10)
credits2 = tk.Label(creditsFrame, text="LlamaTrauma, for all their work and amazing website this program is based on", font=('Arial',15))
credits2.pack(pady=10)
credits3 = tk.Label(creditsFrame, text="lonelyVoxel, for their work on firebro which inspired me to do this", font=('Arial',12))
credits3.pack(pady=10)
credits4 = tk.Label(creditsFrame, text="Fun Guy, for their many discoveries diving into the code", font=('Arial',12))
credits4.pack(pady=10)
credits5 = tk.Label(creditsFrame, text="Knockoff, Kircher, C², Zpocalypse and others for testing and various findings", font=('Arial',11))
credits5.pack(pady=10)
credits6 = tk.Label(creditsFrame, text="Becket, for their gathering of knowledge and help finding it", font=('Arial',11))
credits6.pack(pady=10)
credits7 = tk.Label(creditsFrame, text="Everyone else I'm forgetting :)")
credits7.pack(pady=10)



root.title("Sluggers stats editor v3")
root.lift()
root.attributes('-topmost', True)
root.attributes('-topmost', False)
root.mainloop()